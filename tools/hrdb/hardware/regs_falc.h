/* Autogenerated file */


#ifndef STGEN_regs_falc_H
#define STGEN_regs_falc_H
#include <stdint.h>

#include "stgen.h"

namespace Regs {


/* Enum -> string lookup declarations */

/* Register Addresses */
static const uint32_t VID_SCANLINE_OFFSET_FALCON     = 0xff820e;
static const uint32_t VID_LINE_WIDTH_FALCON          = 0xff8210;
static const uint32_t FALC_SPSHIFT                   = 0xff8266;

/* Register Field Accessors */

/* Register VID_SCANLINE_OFFSET_FALCON ($ff820e)*/
/* Field ALL */
static const uint32_t VID_SCANLINE_OFFSET_FALCON_ALL_SHIFT = 0;
static const uint32_t VID_SCANLINE_OFFSET_FALCON_ALL_MASK = 511;
inline uint16_t GetField_VID_SCANLINE_OFFSET_FALCON_ALL(uint32_t value) { return static_cast<uint16_t>(((value)>>0) & 511); }
extern const stgen::FieldDef g_fieldDef_VID_SCANLINE_OFFSET_FALCON_ALL;


/* Register VID_LINE_WIDTH_FALCON ($ff8210)*/
/* Field ALL */
static const uint32_t VID_LINE_WIDTH_FALCON_ALL_SHIFT = 0;
static const uint32_t VID_LINE_WIDTH_FALCON_ALL_MASK = 1023;
inline uint16_t GetField_VID_LINE_WIDTH_FALCON_ALL(uint32_t value) { return static_cast<uint16_t>(((value)>>0) & 1023); }
extern const stgen::FieldDef g_fieldDef_VID_LINE_WIDTH_FALCON_ALL;


/* Register FALC_SPSHIFT ($ff8266)*/
/* Field COLBANK */
static const uint32_t FALC_SPSHIFT_COLBANK_SHIFT = 0;
static const uint32_t FALC_SPSHIFT_COLBANK_MASK = 15;
inline uint8_t GetField_FALC_SPSHIFT_COLBANK(uint32_t value) { return static_cast<uint8_t>(((value)>>0) & 15); }
extern const stgen::FieldDef g_fieldDef_FALC_SPSHIFT_COLBANK;

/* Field MODE_256 */
static const uint32_t FALC_SPSHIFT_MODE_256_SHIFT = 4;
static const uint32_t FALC_SPSHIFT_MODE_256_MASK = 1;
inline bool GetField_FALC_SPSHIFT_MODE_256(uint32_t value) { return static_cast<bool>(((value)>>4) & 1); }
extern const stgen::FieldDef g_fieldDef_FALC_SPSHIFT_MODE_256;

/* Field TRUCOL */
static const uint32_t FALC_SPSHIFT_TRUCOL_SHIFT = 8;
static const uint32_t FALC_SPSHIFT_TRUCOL_MASK = 1;
inline bool GetField_FALC_SPSHIFT_TRUCOL(uint32_t value) { return static_cast<bool>(((value)>>8) & 1); }
extern const stgen::FieldDef g_fieldDef_FALC_SPSHIFT_TRUCOL;

/* Field OVERLAY */
static const uint32_t FALC_SPSHIFT_OVERLAY_SHIFT = 9;
static const uint32_t FALC_SPSHIFT_OVERLAY_MASK = 1;
inline bool GetField_FALC_SPSHIFT_OVERLAY(uint32_t value) { return static_cast<bool>(((value)>>9) & 1); }
extern const stgen::FieldDef g_fieldDef_FALC_SPSHIFT_OVERLAY;

/* Field MODE_2 */
static const uint32_t FALC_SPSHIFT_MODE_2_SHIFT = 10;
static const uint32_t FALC_SPSHIFT_MODE_2_MASK = 1;
inline bool GetField_FALC_SPSHIFT_MODE_2(uint32_t value) { return static_cast<bool>(((value)>>10) & 1); }
extern const stgen::FieldDef g_fieldDef_FALC_SPSHIFT_MODE_2;


/* Register Field Sets */

extern const stgen::FieldDef* g_regFieldsDef_VID_SCANLINE_OFFSET_FALCON[];
extern const stgen::FieldDef* g_regFieldsDef_VID_LINE_WIDTH_FALCON[];
extern const stgen::FieldDef* g_regFieldsDef_FALC_SPSHIFT[];
} // namespace
#endif
