/* Autogenerated file */


#ifndef STGEN_regs_st_H
#define STGEN_regs_st_H
#include <stdint.h>
namespace Regs {

struct StringDef
{
    uint32_t value;
    const char* string;
};

struct FieldDef
{
    uint32_t regAddr;
    uint32_t mask;
    uint8_t size;
    uint8_t shift;
    const char* name;
    const StringDef* strings;
    const char* comment;
};

// Look up a string in the table
const char* GetString(const StringDef* strings, uint32_t value);


/* Enum MMU_BANK */
enum class MMU_BANK : uint32_t {
	SIZE_128K            =      0, /* 128K */
	SIZE_512K            =      1, /* 512K */
	SIZE_2MB             =      2, /* 2MB */
	SIZE_RESERVED        =      3  /* reserved */
};

/* Enum RESOLUTION */
enum class RESOLUTION : uint32_t {
	LOW                  =      0, /* ST-Low */
	MEDIUM               =      1, /* ST-Medium */
	HIGH                 =      2  /* ST-High */
};

/* Enum SYNC_RATE */
enum class SYNC_RATE : uint32_t {
	HZ_60                =      0, /* 60Hz */
	HZ_50                =      1  /* 50Hz */
};

/* Enum SYNC_TYPE */
enum class SYNC_TYPE : uint32_t {
	INTERNAL             =      0, /* Internal Sync */
	EXTERNAL             =      1  /* External Sync */
};

/* Enum TIMER_MODE_A */
enum class TIMER_MODE_A : uint32_t {
	STOP                 =      0, /* Stopped */
	DELAY_4              =      1, /* Delay mode, divide by 4 */
	DELAY_10             =      2, /* Delay mode, divide by 10 */
	DELAY_16             =      3, /* Delay mode, divide by 16 */
	DELAY_50             =      4, /* Delay mode, divide by 50 */
	DELAY_64             =      5, /* Delay mode, divide by 64 */
	DELAY_100            =      6, /* Delay mode, divide by 100 */
	DELAY_200            =      7, /* Delay mode, divide by 200 */
	EVENT                =      8, /* Event count mode */
	PULSE_4              =      9, /* Pulse extension mode, divide by 4 */
	PULSE_10             =     10, /* Pulse extension mode, divide by 10 */
	PULSE_16             =     11, /* Pulse extension mode, divide by 16 */
	PULSE_50             =     12, /* Pulse extension mode, divide by 50 */
	PULSE_64             =     13, /* Pulse extension mode, divide by 64 */
	PULSE_100            =     14, /* Pulse extension mode, divide by 100 */
	PULSE_200            =     15  /* Pulse extension mode, divide by 200 */
};

/* Enum TIMER_MODE_B */
enum class TIMER_MODE_B : uint32_t {
	STOP                 =      0, /* Stopped */
	DELAY_4              =      1, /* Delay mode, divide by 4 */
	DELAY_10             =      2, /* Delay mode, divide by 10 */
	DELAY_16             =      3, /* Delay mode, divide by 16 */
	DELAY_50             =      4, /* Delay mode, divide by 50 */
	DELAY_64             =      5, /* Delay mode, divide by 64 */
	DELAY_100            =      6, /* Delay mode, divide by 100 */
	DELAY_200            =      7, /* Delay mode, divide by 200 */
	EVENT                =      8, /* Event count mode (HBL events) */
	PULSE_4              =      9, /* Pulse extension mode, divide by 4 */
	PULSE_10             =     10, /* Pulse extension mode, divide by 10 */
	PULSE_16             =     11, /* Pulse extension mode, divide by 16 */
	PULSE_50             =     12, /* Pulse extension mode, divide by 50 */
	PULSE_64             =     13, /* Pulse extension mode, divide by 64 */
	PULSE_100            =     14, /* Pulse extension mode, divide by 100 */
	PULSE_200            =     15  /* Pulse extension mode, divide by 200 */
};

/* Enum TIMER_MODE_CD */
enum class TIMER_MODE_CD : uint32_t {
	STOP                 =      0, /* Stopped */
	DELAY_4              =      1, /* Delay mode, divide by 4 */
	DELAY_10             =      2, /* Delay mode, divide by 10 */
	DELAY_16             =      3, /* Delay mode, divide by 16 */
	DELAY_50             =      4, /* Delay mode, divide by 50 */
	DELAY_64             =      5, /* Delay mode, divide by 64 */
	DELAY_100            =      6, /* Delay mode, divide by 100 */
	DELAY_200            =      7  /* Delay mode, divide by 200 */
};

/* Enum ENDINT */
enum class ENDINT : uint32_t {
	AUTO                 =      0, /* Automatic */
	SOFTWARE             =      1  /* Software */
};

/* Enum USARTLEN */
enum class USARTLEN : uint32_t {
	LEN_8                =      0, /* 8 Bits */
	LEN_7                =      1, /* 7 Bits */
	LEN_6                =      2, /* 6 Bits */
	LEN_5                =      3  /* 5 Bits */
};

/* Enum ENV_SHAPE */
enum class ENV_SHAPE : uint32_t {
	ENV_0000             =      0, /* \\___ */
	ENV_0001             =      1, /* \\___ */
	ENV_0010             =      2, /* \\___ */
	ENV_0011             =      3, /* \\___ */
	ENV_0100             =      4, /* /|__ */
	ENV_0101             =      5, /* /|__ */
	ENV_0110             =      6, /* /|__ */
	ENV_0111             =      7, /* /|__ */
	ENV_1000             =      8, /* \\|\\| */
	ENV_1001             =      9, /* \\___ */
	ENV_1010             =     10, /* \\/\\/ */
	ENV_1011             =     11, /* \\|-- */
	ENV_1100             =     12, /* /|/| */
	ENV_1101             =     13, /* /--- */
	ENV_1110             =     14, /* /\\/\\ */
	ENV_1111             =     15  /* /|__ */
};

/* Enum BLT_HOP */
enum class BLT_HOP : uint32_t {
	HOP_ONES             =      0, /* All Ones */
	HOP_HALFTONE         =      1, /* Halftone only */
	HOP_SOURCE           =      2, /* Source only */
	HOP_SOURCE_AND_HALFTONE =      3  /* Source AND halftone */
};

/* Enum BLT_OP */
enum class BLT_OP : uint32_t {
	ZERO                 =      0, /* All zeros */
	AND                  =      1, /* Source AND destination */
	AND_NOT              =      2, /* Source AND NOT destination */
	SOURCE               =      3, /* Source */
	NOT_AND              =      4, /* NOT source AND destination */
	DEST                 =      5, /* Destination */
	XOR                  =      6, /* Source XOR destination */
	OR                   =      7, /* Source OR destination */
	NOT_AND_NOT          =      8, /* NOT source AND NOT destination */
	NOT_XOR              =      9, /* NOT source XOR destination */
	NOT_DEST             =     10, /* NOT destination */
	OR_NOT_DEST          =     11, /* Source OR NOT destination */
	NOT_SOURCE           =     12, /* NOT source */
	NOT_SOURCE_OR        =     13, /* NOT source OR destination */
	NOT_SOURCE_OR_NOT    =     14, /* NOT source OR NOT destination */
	ONES                 =     15  /* All ones */
};

/* Enum IS_STEREO */
enum class IS_STEREO : uint32_t {
	MONO                 =      0, /* Mono */
	STEREO               =      1  /* Stereo */
};

/* Enum DMA_FREQ */
enum class DMA_FREQ : uint32_t {
	FREQ_6258            =      0, /* 6258Hz (STE only) */
	FREQ_12517           =      1, /* 12517Hz */
	FREQ_25033           =      2, /* 25033Hz */
	FREQ_50066           =      3  /* 50066Hz */
};

/* Enum -> string lookup declarations */
extern const char* GetString(MMU_BANK val);
extern const char* GetString(RESOLUTION val);
extern const char* GetString(SYNC_RATE val);
extern const char* GetString(SYNC_TYPE val);
extern const char* GetString(TIMER_MODE_A val);
extern const char* GetString(TIMER_MODE_B val);
extern const char* GetString(TIMER_MODE_CD val);
extern const char* GetString(ENDINT val);
extern const char* GetString(USARTLEN val);
extern const char* GetString(ENV_SHAPE val);
extern const char* GetString(BLT_HOP val);
extern const char* GetString(BLT_OP val);
extern const char* GetString(IS_STEREO val);
extern const char* GetString(DMA_FREQ val);

/* Register Addresses */
static const uint32_t MMU_CONFIG                     = 0xff8001;
static const uint32_t VID_REG_BASE                   = 0xff8200;
static const uint32_t VID_BASE_HIGH                  = 0xff8201;
static const uint32_t VID_BASE_MID                   = 0xff8203;
static const uint32_t VID_CURR_HIGH                  = 0xff8205;
static const uint32_t VID_CURR_MID                   = 0xff8207;
static const uint32_t VID_CURR_LOW                   = 0xff8209;
static const uint32_t VID_BASE_LOW_STE               = 0xff820d;
static const uint32_t VID_SCANLINE_OFFSET_STE        = 0xff820f;
static const uint32_t VID_HORIZ_SCROLL_STE           = 0xff8265;
static const uint32_t VID_SYNC_MODE                  = 0xff820a;
static const uint32_t VID_PAL_0                      = 0xff8240;
static const uint32_t VID_PAL_1                      = 0xff8242;
static const uint32_t VID_PAL_2                      = 0xff8244;
static const uint32_t VID_PAL_3                      = 0xff8246;
static const uint32_t VID_PAL_4                      = 0xff8248;
static const uint32_t VID_PAL_5                      = 0xff824a;
static const uint32_t VID_PAL_6                      = 0xff824c;
static const uint32_t VID_PAL_7                      = 0xff825e;
static const uint32_t VID_PAL_8                      = 0xff8250;
static const uint32_t VID_PAL_9                      = 0xff8252;
static const uint32_t VID_PAL_10                     = 0xff8254;
static const uint32_t VID_PAL_11                     = 0xff8256;
static const uint32_t VID_PAL_12                     = 0xff8258;
static const uint32_t VID_PAL_13                     = 0xff825a;
static const uint32_t VID_PAL_14                     = 0xff825c;
static const uint32_t VID_PAL_15                     = 0xff825e;
static const uint32_t VID_SHIFTER_RES                = 0xff8260;
static const uint32_t FDC_ACCESS                     = 0xff8604;
static const uint32_t FDC_STATUS                     = 0xff8606;
static const uint32_t FDC_DMA_BASE_HIGH              = 0xff8609;
static const uint32_t FDC_DMA_BASE_MID               = 0xff860b;
static const uint32_t FDC_DMA_BASE_LOW               = 0xff860d;
static const uint32_t MFP_GPIP                       = 0xfffa01;
static const uint32_t MFP_AER                        = 0xfffa03;
static const uint32_t MFP_DDR                        = 0xfffa05;
static const uint32_t MFP_IERA                       = 0xfffa07;
static const uint32_t MFP_IERB                       = 0xfffa09;
static const uint32_t MFP_IPRA                       = 0xfffa0b;
static const uint32_t MFP_IPRB                       = 0xfffa0d;
static const uint32_t MFP_ISRA                       = 0xfffa0f;
static const uint32_t MFP_ISRB                       = 0xfffa11;
static const uint32_t MFP_IMRA                       = 0xfffa13;
static const uint32_t MFP_IMRB                       = 0xfffa15;
static const uint32_t MFP_VR                         = 0xfffa17;
static const uint32_t MFP_TACR                       = 0xfffa19;
static const uint32_t MFP_TBCR                       = 0xfffa1b;
static const uint32_t MFP_TCDCR                      = 0xfffa1d;
static const uint32_t MFP_TADR                       = 0xfffa1f;
static const uint32_t MFP_TBDR                       = 0xfffa21;
static const uint32_t MFP_TCDR                       = 0xfffa23;
static const uint32_t MFP_TDDR                       = 0xfffa25;
static const uint32_t MFP_SCR                        = 0xfffa27;
static const uint32_t MFP_UCR                        = 0xfffa29;
static const uint32_t MFP_RSR                        = 0xfffa2b;
static const uint32_t MFP_TSR                        = 0xfffa2d;
static const uint32_t MFP_UDR                        = 0xfffa2f;
static const uint32_t YM_PERIOD_A_LO                 = 0x0;
static const uint32_t YM_PERIOD_A_HI                 = 0x1;
static const uint32_t YM_PERIOD_B_LO                 = 0x2;
static const uint32_t YM_PERIOD_B_HI                 = 0x3;
static const uint32_t YM_PERIOD_C_LO                 = 0x4;
static const uint32_t YM_PERIOD_C_HI                 = 0x5;
static const uint32_t YM_PERIOD_NOISE                = 0x6;
static const uint32_t YM_MIXER                       = 0x7;
static const uint32_t YM_VOLUME_A                    = 0x8;
static const uint32_t YM_VOLUME_B                    = 0x9;
static const uint32_t YM_VOLUME_C                    = 0xa;
static const uint32_t YM_PERIOD_ENV_LO               = 0xb;
static const uint32_t YM_PERIOD_ENV_HI               = 0xc;
static const uint32_t YM_PERIOD_ENV_SHAPE            = 0xd;
static const uint32_t YM_PORT_A                      = 0xe;
static const uint32_t YM_PORT_B                      = 0xf;
static const uint32_t BLT_HALFTONE_0                 = 0xff8a00;
static const uint32_t BLT_HALFTONE_1                 = 0xff8a02;
static const uint32_t BLT_HALFTONE_2                 = 0xff8a04;
static const uint32_t BLT_HALFTONE_3                 = 0xff8a06;
static const uint32_t BLT_HALFTONE_4                 = 0xff8a08;
static const uint32_t BLT_HALFTONE_5                 = 0xff8a0a;
static const uint32_t BLT_HALFTONE_6                 = 0xff8a0c;
static const uint32_t BLT_HALFTONE_7                 = 0xff8a0e;
static const uint32_t BLT_HALFTONE_8                 = 0xff8a10;
static const uint32_t BLT_HALFTONE_9                 = 0xff8a12;
static const uint32_t BLT_HALFTONE_10                = 0xff8a14;
static const uint32_t BLT_HALFTONE_11                = 0xff8a16;
static const uint32_t BLT_HALFTONE_12                = 0xff8a18;
static const uint32_t BLT_HALFTONE_13                = 0xff8a1a;
static const uint32_t BLT_HALFTONE_14                = 0xff8a1c;
static const uint32_t BLT_HALFTONE_15                = 0xff8a1e;
static const uint32_t BLT_SRC_INC_X                  = 0xff8a20;
static const uint32_t BLT_SRC_INC_Y                  = 0xff8a22;
static const uint32_t BLT_SRC_ADDR                   = 0xff8a24;
static const uint32_t BLT_ENDMASK_1                  = 0xff8a28;
static const uint32_t BLT_ENDMASK_2                  = 0xff8a2a;
static const uint32_t BLT_ENDMASK_3                  = 0xff8a2c;
static const uint32_t BLT_DST_INC_X                  = 0xff8a2e;
static const uint32_t BLT_DST_INC_Y                  = 0xff8a30;
static const uint32_t BLT_DST_ADDR                   = 0xff8a32;
static const uint32_t BLT_XCOUNT                     = 0xff8a36;
static const uint32_t BLT_YCOUNT                     = 0xff8a38;
static const uint32_t BLT_HALFTONE_OP                = 0xff8a3a;
static const uint32_t BLT_LOGICAL_OP                 = 0xff8a3b;
static const uint32_t BLT_CTRL_1                     = 0xff8a3c;
static const uint32_t BLT_CTRL_2                     = 0xff8a3d;
static const uint32_t DMA_SND_BASE                   = 0xff8900;
static const uint32_t DMA_BUFFER_INTERRUPTS          = 0xff8900;
static const uint32_t DMA_CONTROL                    = 0xff8901;
static const uint32_t DMA_START_HIGH                 = 0xff8903;
static const uint32_t DMA_START_MID                  = 0xff8905;
static const uint32_t DMA_START_LOW                  = 0xff8907;
static const uint32_t DMA_CURR_HIGH                  = 0xff8909;
static const uint32_t DMA_CURR_MID                   = 0xff890b;
static const uint32_t DMA_CURR_LOW                   = 0xff890d;
static const uint32_t DMA_END_HIGH                   = 0xff890f;
static const uint32_t DMA_END_MID                    = 0xff8911;
static const uint32_t DMA_END_LOW                    = 0xff8913;
static const uint32_t DMA_SND_MODE                   = 0xff8921;

/* Register Field Accessors */

/* Register MMU_CONFIG ($ff8001)*/
/* Field BANK1 */
static const uint32_t MMU_CONFIG_BANK1_SHIFT = 0;
static const uint32_t MMU_CONFIG_BANK1_MASK = 3;
inline MMU_BANK GetField_MMU_CONFIG_BANK1(uint32_t value) { return static_cast<MMU_BANK>(((value)>>0) & 3); }
extern const FieldDef g_fieldDef_MMU_CONFIG_BANK1;

/* Field BANK0 */
static const uint32_t MMU_CONFIG_BANK0_SHIFT = 2;
static const uint32_t MMU_CONFIG_BANK0_MASK = 3;
inline MMU_BANK GetField_MMU_CONFIG_BANK0(uint32_t value) { return static_cast<MMU_BANK>(((value)>>2) & 3); }
extern const FieldDef g_fieldDef_MMU_CONFIG_BANK0;


/* Register VID_BASE_HIGH ($ff8201)*/
/* Field ALL */
static const uint32_t VID_BASE_HIGH_ALL_SHIFT = 0;
static const uint32_t VID_BASE_HIGH_ALL_MASK = 255;
inline uint8_t GetField_VID_BASE_HIGH_ALL(uint32_t value) { return static_cast<uint8_t>(((value)>>0) & 255); }
extern const FieldDef g_fieldDef_VID_BASE_HIGH_ALL;


/* Register VID_BASE_MID ($ff8203)*/
/* Field ALL */
static const uint32_t VID_BASE_MID_ALL_SHIFT = 0;
static const uint32_t VID_BASE_MID_ALL_MASK = 255;
inline uint8_t GetField_VID_BASE_MID_ALL(uint32_t value) { return static_cast<uint8_t>(((value)>>0) & 255); }
extern const FieldDef g_fieldDef_VID_BASE_MID_ALL;


/* Register VID_BASE_LOW_STE ($ff820d)*/
/* Field ALL */
static const uint32_t VID_BASE_LOW_STE_ALL_SHIFT = 0;
static const uint32_t VID_BASE_LOW_STE_ALL_MASK = 255;
inline uint8_t GetField_VID_BASE_LOW_STE_ALL(uint32_t value) { return static_cast<uint8_t>(((value)>>0) & 255); }
extern const FieldDef g_fieldDef_VID_BASE_LOW_STE_ALL;


/* Register VID_SCANLINE_OFFSET_STE ($ff820f)*/
/* Field ALL */
static const uint32_t VID_SCANLINE_OFFSET_STE_ALL_SHIFT = 0;
static const uint32_t VID_SCANLINE_OFFSET_STE_ALL_MASK = 255;
inline uint8_t GetField_VID_SCANLINE_OFFSET_STE_ALL(uint32_t value) { return static_cast<uint8_t>(((value)>>0) & 255); }
extern const FieldDef g_fieldDef_VID_SCANLINE_OFFSET_STE_ALL;


/* Register VID_HORIZ_SCROLL_STE ($ff8265)*/
/* Field PIXELS */
static const uint32_t VID_HORIZ_SCROLL_STE_PIXELS_SHIFT = 0;
static const uint32_t VID_HORIZ_SCROLL_STE_PIXELS_MASK = 15;
inline uint8_t GetField_VID_HORIZ_SCROLL_STE_PIXELS(uint32_t value) { return static_cast<uint8_t>(((value)>>0) & 15); }
extern const FieldDef g_fieldDef_VID_HORIZ_SCROLL_STE_PIXELS;


/* Register VID_SYNC_MODE ($ff820a)*/
/* Field TYPE */
static const uint32_t VID_SYNC_MODE_TYPE_SHIFT = 0;
static const uint32_t VID_SYNC_MODE_TYPE_MASK = 1;
inline SYNC_TYPE GetField_VID_SYNC_MODE_TYPE(uint32_t value) { return static_cast<SYNC_TYPE>(((value)>>0) & 1); }
extern const FieldDef g_fieldDef_VID_SYNC_MODE_TYPE;

/* Field RATE */
static const uint32_t VID_SYNC_MODE_RATE_SHIFT = 1;
static const uint32_t VID_SYNC_MODE_RATE_MASK = 1;
inline SYNC_RATE GetField_VID_SYNC_MODE_RATE(uint32_t value) { return static_cast<SYNC_RATE>(((value)>>1) & 1); }
extern const FieldDef g_fieldDef_VID_SYNC_MODE_RATE;


/* Register VID_PAL_0 ($ff8240)*/
/* Field BLUE_ST */
static const uint32_t VID_PAL_0_BLUE_ST_SHIFT = 0;
static const uint32_t VID_PAL_0_BLUE_ST_MASK = 7;
inline uint8_t GetField_VID_PAL_0_BLUE_ST(uint32_t value) { return static_cast<uint8_t>(((value)>>0) & 7); }
extern const FieldDef g_fieldDef_VID_PAL_0_BLUE_ST;

/* Field BLUE_STE */
static const uint32_t VID_PAL_0_BLUE_STE_SHIFT = 0;
static const uint32_t VID_PAL_0_BLUE_STE_MASK = 15;
inline uint8_t GetField_VID_PAL_0_BLUE_STE(uint32_t value) { return static_cast<uint8_t>(((value)>>0) & 15); }
extern const FieldDef g_fieldDef_VID_PAL_0_BLUE_STE;

/* Field GREEN_ST */
static const uint32_t VID_PAL_0_GREEN_ST_SHIFT = 4;
static const uint32_t VID_PAL_0_GREEN_ST_MASK = 7;
inline uint8_t GetField_VID_PAL_0_GREEN_ST(uint32_t value) { return static_cast<uint8_t>(((value)>>4) & 7); }
extern const FieldDef g_fieldDef_VID_PAL_0_GREEN_ST;

/* Field GREEN_STE */
static const uint32_t VID_PAL_0_GREEN_STE_SHIFT = 4;
static const uint32_t VID_PAL_0_GREEN_STE_MASK = 15;
inline uint8_t GetField_VID_PAL_0_GREEN_STE(uint32_t value) { return static_cast<uint8_t>(((value)>>4) & 15); }
extern const FieldDef g_fieldDef_VID_PAL_0_GREEN_STE;

/* Field RED_ST */
static const uint32_t VID_PAL_0_RED_ST_SHIFT = 8;
static const uint32_t VID_PAL_0_RED_ST_MASK = 7;
inline uint8_t GetField_VID_PAL_0_RED_ST(uint32_t value) { return static_cast<uint8_t>(((value)>>8) & 7); }
extern const FieldDef g_fieldDef_VID_PAL_0_RED_ST;

/* Field RED_STE */
static const uint32_t VID_PAL_0_RED_STE_SHIFT = 8;
static const uint32_t VID_PAL_0_RED_STE_MASK = 15;
inline uint8_t GetField_VID_PAL_0_RED_STE(uint32_t value) { return static_cast<uint8_t>(((value)>>8) & 15); }
extern const FieldDef g_fieldDef_VID_PAL_0_RED_STE;


/* Register VID_SHIFTER_RES ($ff8260)*/
/* Field RES */
static const uint32_t VID_SHIFTER_RES_RES_SHIFT = 0;
static const uint32_t VID_SHIFTER_RES_RES_MASK = 3;
inline RESOLUTION GetField_VID_SHIFTER_RES_RES(uint32_t value) { return static_cast<RESOLUTION>(((value)>>0) & 3); }
extern const FieldDef g_fieldDef_VID_SHIFTER_RES_RES;


/* Register FDC_ACCESS ($ff8604)*/
/* Field ALL */
static const uint32_t FDC_ACCESS_ALL_SHIFT = 0;
static const uint32_t FDC_ACCESS_ALL_MASK = 65535;
inline uint16_t GetField_FDC_ACCESS_ALL(uint32_t value) { return static_cast<uint16_t>(((value)>>0) & 65535); }
extern const FieldDef g_fieldDef_FDC_ACCESS_ALL;


/* Register FDC_STATUS ($ff8606)*/
/* Field ERROR */
static const uint32_t FDC_STATUS_ERROR_SHIFT = 0;
static const uint32_t FDC_STATUS_ERROR_MASK = 1;
inline bool GetField_FDC_STATUS_ERROR(uint32_t value) { return static_cast<bool>(((value)>>0) & 1); }
extern const FieldDef g_fieldDef_FDC_STATUS_ERROR;

/* Field SECT_CNT */
static const uint32_t FDC_STATUS_SECT_CNT_SHIFT = 1;
static const uint32_t FDC_STATUS_SECT_CNT_MASK = 1;
inline bool GetField_FDC_STATUS_SECT_CNT(uint32_t value) { return static_cast<bool>(((value)>>1) & 1); }
extern const FieldDef g_fieldDef_FDC_STATUS_SECT_CNT;

/* Field DATA_REQ */
static const uint32_t FDC_STATUS_DATA_REQ_SHIFT = 2;
static const uint32_t FDC_STATUS_DATA_REQ_MASK = 1;
inline bool GetField_FDC_STATUS_DATA_REQ(uint32_t value) { return static_cast<bool>(((value)>>2) & 1); }
extern const FieldDef g_fieldDef_FDC_STATUS_DATA_REQ;


/* Register FDC_DMA_BASE_HIGH ($ff8609)*/
/* Field ALL */
static const uint32_t FDC_DMA_BASE_HIGH_ALL_SHIFT = 0;
static const uint32_t FDC_DMA_BASE_HIGH_ALL_MASK = 255;
inline uint8_t GetField_FDC_DMA_BASE_HIGH_ALL(uint32_t value) { return static_cast<uint8_t>(((value)>>0) & 255); }
extern const FieldDef g_fieldDef_FDC_DMA_BASE_HIGH_ALL;


/* Register FDC_DMA_BASE_MID ($ff860b)*/
/* Field ALL */
static const uint32_t FDC_DMA_BASE_MID_ALL_SHIFT = 0;
static const uint32_t FDC_DMA_BASE_MID_ALL_MASK = 255;
inline uint8_t GetField_FDC_DMA_BASE_MID_ALL(uint32_t value) { return static_cast<uint8_t>(((value)>>0) & 255); }
extern const FieldDef g_fieldDef_FDC_DMA_BASE_MID_ALL;


/* Register FDC_DMA_BASE_LOW ($ff860d)*/
/* Field ALL */
static const uint32_t FDC_DMA_BASE_LOW_ALL_SHIFT = 0;
static const uint32_t FDC_DMA_BASE_LOW_ALL_MASK = 255;
inline uint8_t GetField_FDC_DMA_BASE_LOW_ALL(uint32_t value) { return static_cast<uint8_t>(((value)>>0) & 255); }
extern const FieldDef g_fieldDef_FDC_DMA_BASE_LOW_ALL;


/* Register MFP_GPIP ($fffa01)*/
/* Field ALL */
static const uint32_t MFP_GPIP_ALL_SHIFT = 0;
static const uint32_t MFP_GPIP_ALL_MASK = 255;
inline uint8_t GetField_MFP_GPIP_ALL(uint32_t value) { return static_cast<uint8_t>(((value)>>0) & 255); }
extern const FieldDef g_fieldDef_MFP_GPIP_ALL;


/* Register MFP_AER ($fffa03)*/
/* Field CENT_BUSY */
static const uint32_t MFP_AER_CENT_BUSY_SHIFT = 0;
static const uint32_t MFP_AER_CENT_BUSY_MASK = 1;
inline bool GetField_MFP_AER_CENT_BUSY(uint32_t value) { return static_cast<bool>(((value)>>0) & 1); }
extern const FieldDef g_fieldDef_MFP_AER_CENT_BUSY;

/* Field RS232_DCD */
static const uint32_t MFP_AER_RS232_DCD_SHIFT = 1;
static const uint32_t MFP_AER_RS232_DCD_MASK = 1;
inline bool GetField_MFP_AER_RS232_DCD(uint32_t value) { return static_cast<bool>(((value)>>1) & 1); }
extern const FieldDef g_fieldDef_MFP_AER_RS232_DCD;

/* Field RS232_CTS */
static const uint32_t MFP_AER_RS232_CTS_SHIFT = 2;
static const uint32_t MFP_AER_RS232_CTS_MASK = 1;
inline bool GetField_MFP_AER_RS232_CTS(uint32_t value) { return static_cast<bool>(((value)>>2) & 1); }
extern const FieldDef g_fieldDef_MFP_AER_RS232_CTS;

/* Field KBD_MIDI */
static const uint32_t MFP_AER_KBD_MIDI_SHIFT = 4;
static const uint32_t MFP_AER_KBD_MIDI_MASK = 1;
inline bool GetField_MFP_AER_KBD_MIDI(uint32_t value) { return static_cast<bool>(((value)>>4) & 1); }
extern const FieldDef g_fieldDef_MFP_AER_KBD_MIDI;

/* Field FDC_HDC */
static const uint32_t MFP_AER_FDC_HDC_SHIFT = 5;
static const uint32_t MFP_AER_FDC_HDC_MASK = 1;
inline bool GetField_MFP_AER_FDC_HDC(uint32_t value) { return static_cast<bool>(((value)>>5) & 1); }
extern const FieldDef g_fieldDef_MFP_AER_FDC_HDC;

/* Field RS232_RING */
static const uint32_t MFP_AER_RS232_RING_SHIFT = 6;
static const uint32_t MFP_AER_RS232_RING_MASK = 1;
inline bool GetField_MFP_AER_RS232_RING(uint32_t value) { return static_cast<bool>(((value)>>6) & 1); }
extern const FieldDef g_fieldDef_MFP_AER_RS232_RING;

/* Field MONO */
static const uint32_t MFP_AER_MONO_SHIFT = 7;
static const uint32_t MFP_AER_MONO_MASK = 1;
inline bool GetField_MFP_AER_MONO(uint32_t value) { return static_cast<bool>(((value)>>7) & 1); }
extern const FieldDef g_fieldDef_MFP_AER_MONO;


/* Register MFP_DDR ($fffa05)*/
/* Field CENT_BUSY */
static const uint32_t MFP_DDR_CENT_BUSY_SHIFT = 0;
static const uint32_t MFP_DDR_CENT_BUSY_MASK = 1;
inline bool GetField_MFP_DDR_CENT_BUSY(uint32_t value) { return static_cast<bool>(((value)>>0) & 1); }
extern const FieldDef g_fieldDef_MFP_DDR_CENT_BUSY;

/* Field RS232_DCD */
static const uint32_t MFP_DDR_RS232_DCD_SHIFT = 1;
static const uint32_t MFP_DDR_RS232_DCD_MASK = 1;
inline bool GetField_MFP_DDR_RS232_DCD(uint32_t value) { return static_cast<bool>(((value)>>1) & 1); }
extern const FieldDef g_fieldDef_MFP_DDR_RS232_DCD;

/* Field RS232_CTS */
static const uint32_t MFP_DDR_RS232_CTS_SHIFT = 2;
static const uint32_t MFP_DDR_RS232_CTS_MASK = 1;
inline bool GetField_MFP_DDR_RS232_CTS(uint32_t value) { return static_cast<bool>(((value)>>2) & 1); }
extern const FieldDef g_fieldDef_MFP_DDR_RS232_CTS;

/* Field KBD_MIDI */
static const uint32_t MFP_DDR_KBD_MIDI_SHIFT = 4;
static const uint32_t MFP_DDR_KBD_MIDI_MASK = 1;
inline bool GetField_MFP_DDR_KBD_MIDI(uint32_t value) { return static_cast<bool>(((value)>>4) & 1); }
extern const FieldDef g_fieldDef_MFP_DDR_KBD_MIDI;

/* Field FDC_HDC */
static const uint32_t MFP_DDR_FDC_HDC_SHIFT = 5;
static const uint32_t MFP_DDR_FDC_HDC_MASK = 1;
inline bool GetField_MFP_DDR_FDC_HDC(uint32_t value) { return static_cast<bool>(((value)>>5) & 1); }
extern const FieldDef g_fieldDef_MFP_DDR_FDC_HDC;

/* Field RS232_RING */
static const uint32_t MFP_DDR_RS232_RING_SHIFT = 6;
static const uint32_t MFP_DDR_RS232_RING_MASK = 1;
inline bool GetField_MFP_DDR_RS232_RING(uint32_t value) { return static_cast<bool>(((value)>>6) & 1); }
extern const FieldDef g_fieldDef_MFP_DDR_RS232_RING;

/* Field MONO */
static const uint32_t MFP_DDR_MONO_SHIFT = 7;
static const uint32_t MFP_DDR_MONO_MASK = 1;
inline bool GetField_MFP_DDR_MONO(uint32_t value) { return static_cast<bool>(((value)>>7) & 1); }
extern const FieldDef g_fieldDef_MFP_DDR_MONO;


/* Register MFP_IERA ($fffa07)*/
/* Field TIMER_B */
static const uint32_t MFP_IERA_TIMER_B_SHIFT = 0;
static const uint32_t MFP_IERA_TIMER_B_MASK = 1;
inline bool GetField_MFP_IERA_TIMER_B(uint32_t value) { return static_cast<bool>(((value)>>0) & 1); }
extern const FieldDef g_fieldDef_MFP_IERA_TIMER_B;

/* Field SEND_ERR */
static const uint32_t MFP_IERA_SEND_ERR_SHIFT = 1;
static const uint32_t MFP_IERA_SEND_ERR_MASK = 1;
inline bool GetField_MFP_IERA_SEND_ERR(uint32_t value) { return static_cast<bool>(((value)>>1) & 1); }
extern const FieldDef g_fieldDef_MFP_IERA_SEND_ERR;

/* Field SEND_EMPTY */
static const uint32_t MFP_IERA_SEND_EMPTY_SHIFT = 2;
static const uint32_t MFP_IERA_SEND_EMPTY_MASK = 1;
inline bool GetField_MFP_IERA_SEND_EMPTY(uint32_t value) { return static_cast<bool>(((value)>>2) & 1); }
extern const FieldDef g_fieldDef_MFP_IERA_SEND_EMPTY;

/* Field REC_ERR */
static const uint32_t MFP_IERA_REC_ERR_SHIFT = 3;
static const uint32_t MFP_IERA_REC_ERR_MASK = 1;
inline bool GetField_MFP_IERA_REC_ERR(uint32_t value) { return static_cast<bool>(((value)>>3) & 1); }
extern const FieldDef g_fieldDef_MFP_IERA_REC_ERR;

/* Field REC_FULL */
static const uint32_t MFP_IERA_REC_FULL_SHIFT = 4;
static const uint32_t MFP_IERA_REC_FULL_MASK = 1;
inline bool GetField_MFP_IERA_REC_FULL(uint32_t value) { return static_cast<bool>(((value)>>4) & 1); }
extern const FieldDef g_fieldDef_MFP_IERA_REC_FULL;

/* Field TIMER_A */
static const uint32_t MFP_IERA_TIMER_A_SHIFT = 5;
static const uint32_t MFP_IERA_TIMER_A_MASK = 1;
inline bool GetField_MFP_IERA_TIMER_A(uint32_t value) { return static_cast<bool>(((value)>>5) & 1); }
extern const FieldDef g_fieldDef_MFP_IERA_TIMER_A;

/* Field RS232_RING */
static const uint32_t MFP_IERA_RS232_RING_SHIFT = 6;
static const uint32_t MFP_IERA_RS232_RING_MASK = 1;
inline bool GetField_MFP_IERA_RS232_RING(uint32_t value) { return static_cast<bool>(((value)>>6) & 1); }
extern const FieldDef g_fieldDef_MFP_IERA_RS232_RING;

/* Field MONO_DETECT */
static const uint32_t MFP_IERA_MONO_DETECT_SHIFT = 7;
static const uint32_t MFP_IERA_MONO_DETECT_MASK = 1;
inline bool GetField_MFP_IERA_MONO_DETECT(uint32_t value) { return static_cast<bool>(((value)>>7) & 1); }
extern const FieldDef g_fieldDef_MFP_IERA_MONO_DETECT;


/* Register MFP_IERB ($fffa09)*/
/* Field RS232_DTD */
static const uint32_t MFP_IERB_RS232_DTD_SHIFT = 1;
static const uint32_t MFP_IERB_RS232_DTD_MASK = 1;
inline bool GetField_MFP_IERB_RS232_DTD(uint32_t value) { return static_cast<bool>(((value)>>1) & 1); }
extern const FieldDef g_fieldDef_MFP_IERB_RS232_DTD;

/* Field CENT_BUSY */
static const uint32_t MFP_IERB_CENT_BUSY_SHIFT = 1;
static const uint32_t MFP_IERB_CENT_BUSY_MASK = 1;
inline bool GetField_MFP_IERB_CENT_BUSY(uint32_t value) { return static_cast<bool>(((value)>>1) & 1); }
extern const FieldDef g_fieldDef_MFP_IERB_CENT_BUSY;

/* Field RS232_CTS */
static const uint32_t MFP_IERB_RS232_CTS_SHIFT = 2;
static const uint32_t MFP_IERB_RS232_CTS_MASK = 1;
inline bool GetField_MFP_IERB_RS232_CTS(uint32_t value) { return static_cast<bool>(((value)>>2) & 1); }
extern const FieldDef g_fieldDef_MFP_IERB_RS232_CTS;

/* Field BLITTER */
static const uint32_t MFP_IERB_BLITTER_SHIFT = 3;
static const uint32_t MFP_IERB_BLITTER_MASK = 1;
inline bool GetField_MFP_IERB_BLITTER(uint32_t value) { return static_cast<bool>(((value)>>3) & 1); }
extern const FieldDef g_fieldDef_MFP_IERB_BLITTER;

/* Field TIMER_D */
static const uint32_t MFP_IERB_TIMER_D_SHIFT = 4;
static const uint32_t MFP_IERB_TIMER_D_MASK = 1;
inline bool GetField_MFP_IERB_TIMER_D(uint32_t value) { return static_cast<bool>(((value)>>4) & 1); }
extern const FieldDef g_fieldDef_MFP_IERB_TIMER_D;

/* Field TIMER_C */
static const uint32_t MFP_IERB_TIMER_C_SHIFT = 5;
static const uint32_t MFP_IERB_TIMER_C_MASK = 1;
inline bool GetField_MFP_IERB_TIMER_C(uint32_t value) { return static_cast<bool>(((value)>>5) & 1); }
extern const FieldDef g_fieldDef_MFP_IERB_TIMER_C;

/* Field IKBD_MIDI */
static const uint32_t MFP_IERB_IKBD_MIDI_SHIFT = 6;
static const uint32_t MFP_IERB_IKBD_MIDI_MASK = 1;
inline bool GetField_MFP_IERB_IKBD_MIDI(uint32_t value) { return static_cast<bool>(((value)>>6) & 1); }
extern const FieldDef g_fieldDef_MFP_IERB_IKBD_MIDI;

/* Field FDC_HDC */
static const uint32_t MFP_IERB_FDC_HDC_SHIFT = 7;
static const uint32_t MFP_IERB_FDC_HDC_MASK = 1;
inline bool GetField_MFP_IERB_FDC_HDC(uint32_t value) { return static_cast<bool>(((value)>>7) & 1); }
extern const FieldDef g_fieldDef_MFP_IERB_FDC_HDC;


/* Register MFP_IPRA ($fffa0b)*/
/* Field TIMER_B */
static const uint32_t MFP_IPRA_TIMER_B_SHIFT = 0;
static const uint32_t MFP_IPRA_TIMER_B_MASK = 1;
inline bool GetField_MFP_IPRA_TIMER_B(uint32_t value) { return static_cast<bool>(((value)>>0) & 1); }
extern const FieldDef g_fieldDef_MFP_IPRA_TIMER_B;

/* Field SEND_ERR */
static const uint32_t MFP_IPRA_SEND_ERR_SHIFT = 1;
static const uint32_t MFP_IPRA_SEND_ERR_MASK = 1;
inline bool GetField_MFP_IPRA_SEND_ERR(uint32_t value) { return static_cast<bool>(((value)>>1) & 1); }
extern const FieldDef g_fieldDef_MFP_IPRA_SEND_ERR;

/* Field SEND_EMPTY */
static const uint32_t MFP_IPRA_SEND_EMPTY_SHIFT = 2;
static const uint32_t MFP_IPRA_SEND_EMPTY_MASK = 1;
inline bool GetField_MFP_IPRA_SEND_EMPTY(uint32_t value) { return static_cast<bool>(((value)>>2) & 1); }
extern const FieldDef g_fieldDef_MFP_IPRA_SEND_EMPTY;

/* Field REC_ERR */
static const uint32_t MFP_IPRA_REC_ERR_SHIFT = 3;
static const uint32_t MFP_IPRA_REC_ERR_MASK = 1;
inline bool GetField_MFP_IPRA_REC_ERR(uint32_t value) { return static_cast<bool>(((value)>>3) & 1); }
extern const FieldDef g_fieldDef_MFP_IPRA_REC_ERR;

/* Field REC_FULL */
static const uint32_t MFP_IPRA_REC_FULL_SHIFT = 4;
static const uint32_t MFP_IPRA_REC_FULL_MASK = 1;
inline bool GetField_MFP_IPRA_REC_FULL(uint32_t value) { return static_cast<bool>(((value)>>4) & 1); }
extern const FieldDef g_fieldDef_MFP_IPRA_REC_FULL;

/* Field TIMER_A */
static const uint32_t MFP_IPRA_TIMER_A_SHIFT = 5;
static const uint32_t MFP_IPRA_TIMER_A_MASK = 1;
inline bool GetField_MFP_IPRA_TIMER_A(uint32_t value) { return static_cast<bool>(((value)>>5) & 1); }
extern const FieldDef g_fieldDef_MFP_IPRA_TIMER_A;

/* Field RS232_RING */
static const uint32_t MFP_IPRA_RS232_RING_SHIFT = 6;
static const uint32_t MFP_IPRA_RS232_RING_MASK = 1;
inline bool GetField_MFP_IPRA_RS232_RING(uint32_t value) { return static_cast<bool>(((value)>>6) & 1); }
extern const FieldDef g_fieldDef_MFP_IPRA_RS232_RING;

/* Field MONO_DETECT */
static const uint32_t MFP_IPRA_MONO_DETECT_SHIFT = 7;
static const uint32_t MFP_IPRA_MONO_DETECT_MASK = 1;
inline bool GetField_MFP_IPRA_MONO_DETECT(uint32_t value) { return static_cast<bool>(((value)>>7) & 1); }
extern const FieldDef g_fieldDef_MFP_IPRA_MONO_DETECT;


/* Register MFP_IPRB ($fffa0d)*/
/* Field RS232_DTD */
static const uint32_t MFP_IPRB_RS232_DTD_SHIFT = 1;
static const uint32_t MFP_IPRB_RS232_DTD_MASK = 1;
inline bool GetField_MFP_IPRB_RS232_DTD(uint32_t value) { return static_cast<bool>(((value)>>1) & 1); }
extern const FieldDef g_fieldDef_MFP_IPRB_RS232_DTD;

/* Field CENT_BUSY */
static const uint32_t MFP_IPRB_CENT_BUSY_SHIFT = 1;
static const uint32_t MFP_IPRB_CENT_BUSY_MASK = 1;
inline bool GetField_MFP_IPRB_CENT_BUSY(uint32_t value) { return static_cast<bool>(((value)>>1) & 1); }
extern const FieldDef g_fieldDef_MFP_IPRB_CENT_BUSY;

/* Field RS232_CTS */
static const uint32_t MFP_IPRB_RS232_CTS_SHIFT = 2;
static const uint32_t MFP_IPRB_RS232_CTS_MASK = 1;
inline bool GetField_MFP_IPRB_RS232_CTS(uint32_t value) { return static_cast<bool>(((value)>>2) & 1); }
extern const FieldDef g_fieldDef_MFP_IPRB_RS232_CTS;

/* Field BLITTER */
static const uint32_t MFP_IPRB_BLITTER_SHIFT = 3;
static const uint32_t MFP_IPRB_BLITTER_MASK = 1;
inline bool GetField_MFP_IPRB_BLITTER(uint32_t value) { return static_cast<bool>(((value)>>3) & 1); }
extern const FieldDef g_fieldDef_MFP_IPRB_BLITTER;

/* Field TIMER_D */
static const uint32_t MFP_IPRB_TIMER_D_SHIFT = 4;
static const uint32_t MFP_IPRB_TIMER_D_MASK = 1;
inline bool GetField_MFP_IPRB_TIMER_D(uint32_t value) { return static_cast<bool>(((value)>>4) & 1); }
extern const FieldDef g_fieldDef_MFP_IPRB_TIMER_D;

/* Field TIMER_C */
static const uint32_t MFP_IPRB_TIMER_C_SHIFT = 5;
static const uint32_t MFP_IPRB_TIMER_C_MASK = 1;
inline bool GetField_MFP_IPRB_TIMER_C(uint32_t value) { return static_cast<bool>(((value)>>5) & 1); }
extern const FieldDef g_fieldDef_MFP_IPRB_TIMER_C;

/* Field IKBD_MIDI */
static const uint32_t MFP_IPRB_IKBD_MIDI_SHIFT = 6;
static const uint32_t MFP_IPRB_IKBD_MIDI_MASK = 1;
inline bool GetField_MFP_IPRB_IKBD_MIDI(uint32_t value) { return static_cast<bool>(((value)>>6) & 1); }
extern const FieldDef g_fieldDef_MFP_IPRB_IKBD_MIDI;

/* Field FDC_HDC */
static const uint32_t MFP_IPRB_FDC_HDC_SHIFT = 7;
static const uint32_t MFP_IPRB_FDC_HDC_MASK = 1;
inline bool GetField_MFP_IPRB_FDC_HDC(uint32_t value) { return static_cast<bool>(((value)>>7) & 1); }
extern const FieldDef g_fieldDef_MFP_IPRB_FDC_HDC;


/* Register MFP_ISRA ($fffa0f)*/
/* Field TIMER_B */
static const uint32_t MFP_ISRA_TIMER_B_SHIFT = 0;
static const uint32_t MFP_ISRA_TIMER_B_MASK = 1;
inline bool GetField_MFP_ISRA_TIMER_B(uint32_t value) { return static_cast<bool>(((value)>>0) & 1); }
extern const FieldDef g_fieldDef_MFP_ISRA_TIMER_B;

/* Field SEND_ERR */
static const uint32_t MFP_ISRA_SEND_ERR_SHIFT = 1;
static const uint32_t MFP_ISRA_SEND_ERR_MASK = 1;
inline bool GetField_MFP_ISRA_SEND_ERR(uint32_t value) { return static_cast<bool>(((value)>>1) & 1); }
extern const FieldDef g_fieldDef_MFP_ISRA_SEND_ERR;

/* Field SEND_EMPTY */
static const uint32_t MFP_ISRA_SEND_EMPTY_SHIFT = 2;
static const uint32_t MFP_ISRA_SEND_EMPTY_MASK = 1;
inline bool GetField_MFP_ISRA_SEND_EMPTY(uint32_t value) { return static_cast<bool>(((value)>>2) & 1); }
extern const FieldDef g_fieldDef_MFP_ISRA_SEND_EMPTY;

/* Field REC_ERR */
static const uint32_t MFP_ISRA_REC_ERR_SHIFT = 3;
static const uint32_t MFP_ISRA_REC_ERR_MASK = 1;
inline bool GetField_MFP_ISRA_REC_ERR(uint32_t value) { return static_cast<bool>(((value)>>3) & 1); }
extern const FieldDef g_fieldDef_MFP_ISRA_REC_ERR;

/* Field REC_FULL */
static const uint32_t MFP_ISRA_REC_FULL_SHIFT = 4;
static const uint32_t MFP_ISRA_REC_FULL_MASK = 1;
inline bool GetField_MFP_ISRA_REC_FULL(uint32_t value) { return static_cast<bool>(((value)>>4) & 1); }
extern const FieldDef g_fieldDef_MFP_ISRA_REC_FULL;

/* Field TIMER_A */
static const uint32_t MFP_ISRA_TIMER_A_SHIFT = 5;
static const uint32_t MFP_ISRA_TIMER_A_MASK = 1;
inline bool GetField_MFP_ISRA_TIMER_A(uint32_t value) { return static_cast<bool>(((value)>>5) & 1); }
extern const FieldDef g_fieldDef_MFP_ISRA_TIMER_A;

/* Field RS232_RING */
static const uint32_t MFP_ISRA_RS232_RING_SHIFT = 6;
static const uint32_t MFP_ISRA_RS232_RING_MASK = 1;
inline bool GetField_MFP_ISRA_RS232_RING(uint32_t value) { return static_cast<bool>(((value)>>6) & 1); }
extern const FieldDef g_fieldDef_MFP_ISRA_RS232_RING;

/* Field MONO_DETECT */
static const uint32_t MFP_ISRA_MONO_DETECT_SHIFT = 7;
static const uint32_t MFP_ISRA_MONO_DETECT_MASK = 1;
inline bool GetField_MFP_ISRA_MONO_DETECT(uint32_t value) { return static_cast<bool>(((value)>>7) & 1); }
extern const FieldDef g_fieldDef_MFP_ISRA_MONO_DETECT;


/* Register MFP_ISRB ($fffa11)*/
/* Field RS232_DTD */
static const uint32_t MFP_ISRB_RS232_DTD_SHIFT = 1;
static const uint32_t MFP_ISRB_RS232_DTD_MASK = 1;
inline bool GetField_MFP_ISRB_RS232_DTD(uint32_t value) { return static_cast<bool>(((value)>>1) & 1); }
extern const FieldDef g_fieldDef_MFP_ISRB_RS232_DTD;

/* Field CENT_BUSY */
static const uint32_t MFP_ISRB_CENT_BUSY_SHIFT = 1;
static const uint32_t MFP_ISRB_CENT_BUSY_MASK = 1;
inline bool GetField_MFP_ISRB_CENT_BUSY(uint32_t value) { return static_cast<bool>(((value)>>1) & 1); }
extern const FieldDef g_fieldDef_MFP_ISRB_CENT_BUSY;

/* Field RS232_CTS */
static const uint32_t MFP_ISRB_RS232_CTS_SHIFT = 2;
static const uint32_t MFP_ISRB_RS232_CTS_MASK = 1;
inline bool GetField_MFP_ISRB_RS232_CTS(uint32_t value) { return static_cast<bool>(((value)>>2) & 1); }
extern const FieldDef g_fieldDef_MFP_ISRB_RS232_CTS;

/* Field BLITTER */
static const uint32_t MFP_ISRB_BLITTER_SHIFT = 3;
static const uint32_t MFP_ISRB_BLITTER_MASK = 1;
inline bool GetField_MFP_ISRB_BLITTER(uint32_t value) { return static_cast<bool>(((value)>>3) & 1); }
extern const FieldDef g_fieldDef_MFP_ISRB_BLITTER;

/* Field TIMER_D */
static const uint32_t MFP_ISRB_TIMER_D_SHIFT = 4;
static const uint32_t MFP_ISRB_TIMER_D_MASK = 1;
inline bool GetField_MFP_ISRB_TIMER_D(uint32_t value) { return static_cast<bool>(((value)>>4) & 1); }
extern const FieldDef g_fieldDef_MFP_ISRB_TIMER_D;

/* Field TIMER_C */
static const uint32_t MFP_ISRB_TIMER_C_SHIFT = 5;
static const uint32_t MFP_ISRB_TIMER_C_MASK = 1;
inline bool GetField_MFP_ISRB_TIMER_C(uint32_t value) { return static_cast<bool>(((value)>>5) & 1); }
extern const FieldDef g_fieldDef_MFP_ISRB_TIMER_C;

/* Field IKBD_MIDI */
static const uint32_t MFP_ISRB_IKBD_MIDI_SHIFT = 6;
static const uint32_t MFP_ISRB_IKBD_MIDI_MASK = 1;
inline bool GetField_MFP_ISRB_IKBD_MIDI(uint32_t value) { return static_cast<bool>(((value)>>6) & 1); }
extern const FieldDef g_fieldDef_MFP_ISRB_IKBD_MIDI;

/* Field FDC_HDC */
static const uint32_t MFP_ISRB_FDC_HDC_SHIFT = 7;
static const uint32_t MFP_ISRB_FDC_HDC_MASK = 1;
inline bool GetField_MFP_ISRB_FDC_HDC(uint32_t value) { return static_cast<bool>(((value)>>7) & 1); }
extern const FieldDef g_fieldDef_MFP_ISRB_FDC_HDC;


/* Register MFP_IMRA ($fffa13)*/
/* Field TIMER_B */
static const uint32_t MFP_IMRA_TIMER_B_SHIFT = 0;
static const uint32_t MFP_IMRA_TIMER_B_MASK = 1;
inline bool GetField_MFP_IMRA_TIMER_B(uint32_t value) { return static_cast<bool>(((value)>>0) & 1); }
extern const FieldDef g_fieldDef_MFP_IMRA_TIMER_B;

/* Field SEND_ERR */
static const uint32_t MFP_IMRA_SEND_ERR_SHIFT = 1;
static const uint32_t MFP_IMRA_SEND_ERR_MASK = 1;
inline bool GetField_MFP_IMRA_SEND_ERR(uint32_t value) { return static_cast<bool>(((value)>>1) & 1); }
extern const FieldDef g_fieldDef_MFP_IMRA_SEND_ERR;

/* Field SEND_EMPTY */
static const uint32_t MFP_IMRA_SEND_EMPTY_SHIFT = 2;
static const uint32_t MFP_IMRA_SEND_EMPTY_MASK = 1;
inline bool GetField_MFP_IMRA_SEND_EMPTY(uint32_t value) { return static_cast<bool>(((value)>>2) & 1); }
extern const FieldDef g_fieldDef_MFP_IMRA_SEND_EMPTY;

/* Field REC_ERR */
static const uint32_t MFP_IMRA_REC_ERR_SHIFT = 3;
static const uint32_t MFP_IMRA_REC_ERR_MASK = 1;
inline bool GetField_MFP_IMRA_REC_ERR(uint32_t value) { return static_cast<bool>(((value)>>3) & 1); }
extern const FieldDef g_fieldDef_MFP_IMRA_REC_ERR;

/* Field REC_FULL */
static const uint32_t MFP_IMRA_REC_FULL_SHIFT = 4;
static const uint32_t MFP_IMRA_REC_FULL_MASK = 1;
inline bool GetField_MFP_IMRA_REC_FULL(uint32_t value) { return static_cast<bool>(((value)>>4) & 1); }
extern const FieldDef g_fieldDef_MFP_IMRA_REC_FULL;

/* Field TIMER_A */
static const uint32_t MFP_IMRA_TIMER_A_SHIFT = 5;
static const uint32_t MFP_IMRA_TIMER_A_MASK = 1;
inline bool GetField_MFP_IMRA_TIMER_A(uint32_t value) { return static_cast<bool>(((value)>>5) & 1); }
extern const FieldDef g_fieldDef_MFP_IMRA_TIMER_A;

/* Field RS232_RING */
static const uint32_t MFP_IMRA_RS232_RING_SHIFT = 6;
static const uint32_t MFP_IMRA_RS232_RING_MASK = 1;
inline bool GetField_MFP_IMRA_RS232_RING(uint32_t value) { return static_cast<bool>(((value)>>6) & 1); }
extern const FieldDef g_fieldDef_MFP_IMRA_RS232_RING;

/* Field MONO_DETECT */
static const uint32_t MFP_IMRA_MONO_DETECT_SHIFT = 7;
static const uint32_t MFP_IMRA_MONO_DETECT_MASK = 1;
inline bool GetField_MFP_IMRA_MONO_DETECT(uint32_t value) { return static_cast<bool>(((value)>>7) & 1); }
extern const FieldDef g_fieldDef_MFP_IMRA_MONO_DETECT;


/* Register MFP_IMRB ($fffa15)*/
/* Field RS232_DTD */
static const uint32_t MFP_IMRB_RS232_DTD_SHIFT = 1;
static const uint32_t MFP_IMRB_RS232_DTD_MASK = 1;
inline bool GetField_MFP_IMRB_RS232_DTD(uint32_t value) { return static_cast<bool>(((value)>>1) & 1); }
extern const FieldDef g_fieldDef_MFP_IMRB_RS232_DTD;

/* Field CENT_BUSY */
static const uint32_t MFP_IMRB_CENT_BUSY_SHIFT = 1;
static const uint32_t MFP_IMRB_CENT_BUSY_MASK = 1;
inline bool GetField_MFP_IMRB_CENT_BUSY(uint32_t value) { return static_cast<bool>(((value)>>1) & 1); }
extern const FieldDef g_fieldDef_MFP_IMRB_CENT_BUSY;

/* Field RS232_CTS */
static const uint32_t MFP_IMRB_RS232_CTS_SHIFT = 2;
static const uint32_t MFP_IMRB_RS232_CTS_MASK = 1;
inline bool GetField_MFP_IMRB_RS232_CTS(uint32_t value) { return static_cast<bool>(((value)>>2) & 1); }
extern const FieldDef g_fieldDef_MFP_IMRB_RS232_CTS;

/* Field BLITTER */
static const uint32_t MFP_IMRB_BLITTER_SHIFT = 3;
static const uint32_t MFP_IMRB_BLITTER_MASK = 1;
inline bool GetField_MFP_IMRB_BLITTER(uint32_t value) { return static_cast<bool>(((value)>>3) & 1); }
extern const FieldDef g_fieldDef_MFP_IMRB_BLITTER;

/* Field TIMER_D */
static const uint32_t MFP_IMRB_TIMER_D_SHIFT = 4;
static const uint32_t MFP_IMRB_TIMER_D_MASK = 1;
inline bool GetField_MFP_IMRB_TIMER_D(uint32_t value) { return static_cast<bool>(((value)>>4) & 1); }
extern const FieldDef g_fieldDef_MFP_IMRB_TIMER_D;

/* Field TIMER_C */
static const uint32_t MFP_IMRB_TIMER_C_SHIFT = 5;
static const uint32_t MFP_IMRB_TIMER_C_MASK = 1;
inline bool GetField_MFP_IMRB_TIMER_C(uint32_t value) { return static_cast<bool>(((value)>>5) & 1); }
extern const FieldDef g_fieldDef_MFP_IMRB_TIMER_C;

/* Field IKBD_MIDI */
static const uint32_t MFP_IMRB_IKBD_MIDI_SHIFT = 6;
static const uint32_t MFP_IMRB_IKBD_MIDI_MASK = 1;
inline bool GetField_MFP_IMRB_IKBD_MIDI(uint32_t value) { return static_cast<bool>(((value)>>6) & 1); }
extern const FieldDef g_fieldDef_MFP_IMRB_IKBD_MIDI;

/* Field FDC_HDC */
static const uint32_t MFP_IMRB_FDC_HDC_SHIFT = 7;
static const uint32_t MFP_IMRB_FDC_HDC_MASK = 1;
inline bool GetField_MFP_IMRB_FDC_HDC(uint32_t value) { return static_cast<bool>(((value)>>7) & 1); }
extern const FieldDef g_fieldDef_MFP_IMRB_FDC_HDC;


/* Register MFP_VR ($fffa17)*/
/* Field ENDINT */
static const uint32_t MFP_VR_ENDINT_SHIFT = 3;
static const uint32_t MFP_VR_ENDINT_MASK = 1;
inline ENDINT GetField_MFP_VR_ENDINT(uint32_t value) { return static_cast<ENDINT>(((value)>>3) & 1); }
extern const FieldDef g_fieldDef_MFP_VR_ENDINT;

/* Field VEC_BASE_OFFSET */
static const uint32_t MFP_VR_VEC_BASE_OFFSET_SHIFT = 4;
static const uint32_t MFP_VR_VEC_BASE_OFFSET_MASK = 15;
inline uint8_t GetField_MFP_VR_VEC_BASE_OFFSET(uint32_t value) { return static_cast<uint8_t>(((value)>>4) & 15); }
extern const FieldDef g_fieldDef_MFP_VR_VEC_BASE_OFFSET;


/* Register MFP_TACR ($fffa19)*/
/* Field MODE_TIMER_A */
static const uint32_t MFP_TACR_MODE_TIMER_A_SHIFT = 0;
static const uint32_t MFP_TACR_MODE_TIMER_A_MASK = 15;
inline TIMER_MODE_A GetField_MFP_TACR_MODE_TIMER_A(uint32_t value) { return static_cast<TIMER_MODE_A>(((value)>>0) & 15); }
extern const FieldDef g_fieldDef_MFP_TACR_MODE_TIMER_A;


/* Register MFP_TBCR ($fffa1b)*/
/* Field MODE_TIMER_B */
static const uint32_t MFP_TBCR_MODE_TIMER_B_SHIFT = 0;
static const uint32_t MFP_TBCR_MODE_TIMER_B_MASK = 15;
inline TIMER_MODE_B GetField_MFP_TBCR_MODE_TIMER_B(uint32_t value) { return static_cast<TIMER_MODE_B>(((value)>>0) & 15); }
extern const FieldDef g_fieldDef_MFP_TBCR_MODE_TIMER_B;


/* Register MFP_TCDCR ($fffa1d)*/
/* Field MODE_TIMER_D */
static const uint32_t MFP_TCDCR_MODE_TIMER_D_SHIFT = 0;
static const uint32_t MFP_TCDCR_MODE_TIMER_D_MASK = 7;
inline TIMER_MODE_CD GetField_MFP_TCDCR_MODE_TIMER_D(uint32_t value) { return static_cast<TIMER_MODE_CD>(((value)>>0) & 7); }
extern const FieldDef g_fieldDef_MFP_TCDCR_MODE_TIMER_D;

/* Field MODE_TIMER_C */
static const uint32_t MFP_TCDCR_MODE_TIMER_C_SHIFT = 4;
static const uint32_t MFP_TCDCR_MODE_TIMER_C_MASK = 7;
inline TIMER_MODE_CD GetField_MFP_TCDCR_MODE_TIMER_C(uint32_t value) { return static_cast<TIMER_MODE_CD>(((value)>>4) & 7); }
extern const FieldDef g_fieldDef_MFP_TCDCR_MODE_TIMER_C;


/* Register MFP_TADR ($fffa1f)*/
/* Field ALL */
static const uint32_t MFP_TADR_ALL_SHIFT = 0;
static const uint32_t MFP_TADR_ALL_MASK = 255;
inline uint8_t GetField_MFP_TADR_ALL(uint32_t value) { return static_cast<uint8_t>(((value)>>0) & 255); }
extern const FieldDef g_fieldDef_MFP_TADR_ALL;


/* Register MFP_TBDR ($fffa21)*/
/* Field ALL */
static const uint32_t MFP_TBDR_ALL_SHIFT = 0;
static const uint32_t MFP_TBDR_ALL_MASK = 255;
inline uint8_t GetField_MFP_TBDR_ALL(uint32_t value) { return static_cast<uint8_t>(((value)>>0) & 255); }
extern const FieldDef g_fieldDef_MFP_TBDR_ALL;


/* Register MFP_TCDR ($fffa23)*/
/* Field ALL */
static const uint32_t MFP_TCDR_ALL_SHIFT = 0;
static const uint32_t MFP_TCDR_ALL_MASK = 255;
inline uint8_t GetField_MFP_TCDR_ALL(uint32_t value) { return static_cast<uint8_t>(((value)>>0) & 255); }
extern const FieldDef g_fieldDef_MFP_TCDR_ALL;


/* Register MFP_TDDR ($fffa25)*/
/* Field ALL */
static const uint32_t MFP_TDDR_ALL_SHIFT = 0;
static const uint32_t MFP_TDDR_ALL_MASK = 255;
inline uint8_t GetField_MFP_TDDR_ALL(uint32_t value) { return static_cast<uint8_t>(((value)>>0) & 255); }
extern const FieldDef g_fieldDef_MFP_TDDR_ALL;


/* Register MFP_SCR ($fffa27)*/
/* Field ALL */
static const uint32_t MFP_SCR_ALL_SHIFT = 0;
static const uint32_t MFP_SCR_ALL_MASK = 255;
inline uint8_t GetField_MFP_SCR_ALL(uint32_t value) { return static_cast<uint8_t>(((value)>>0) & 255); }
extern const FieldDef g_fieldDef_MFP_SCR_ALL;


/* Register MFP_UCR ($fffa29)*/
/* Field PARITY_EVEN */
static const uint32_t MFP_UCR_PARITY_EVEN_SHIFT = 0;
static const uint32_t MFP_UCR_PARITY_EVEN_MASK = 1;
inline bool GetField_MFP_UCR_PARITY_EVEN(uint32_t value) { return static_cast<bool>(((value)>>0) & 1); }
extern const FieldDef g_fieldDef_MFP_UCR_PARITY_EVEN;

/* Field PARITY_IGNORE */
static const uint32_t MFP_UCR_PARITY_IGNORE_SHIFT = 1;
static const uint32_t MFP_UCR_PARITY_IGNORE_MASK = 1;
inline bool GetField_MFP_UCR_PARITY_IGNORE(uint32_t value) { return static_cast<bool>(((value)>>1) & 1); }
extern const FieldDef g_fieldDef_MFP_UCR_PARITY_IGNORE;

/* Field FORMAT */
static const uint32_t MFP_UCR_FORMAT_SHIFT = 3;
static const uint32_t MFP_UCR_FORMAT_MASK = 3;
inline uint8_t GetField_MFP_UCR_FORMAT(uint32_t value) { return static_cast<uint8_t>(((value)>>3) & 3); }
extern const FieldDef g_fieldDef_MFP_UCR_FORMAT;

/* Field WORD_LEN */
static const uint32_t MFP_UCR_WORD_LEN_SHIFT = 5;
static const uint32_t MFP_UCR_WORD_LEN_MASK = 3;
inline USARTLEN GetField_MFP_UCR_WORD_LEN(uint32_t value) { return static_cast<USARTLEN>(((value)>>5) & 3); }
extern const FieldDef g_fieldDef_MFP_UCR_WORD_LEN;

/* Field CLOCK_DIV */
static const uint32_t MFP_UCR_CLOCK_DIV_SHIFT = 7;
static const uint32_t MFP_UCR_CLOCK_DIV_MASK = 1;
inline bool GetField_MFP_UCR_CLOCK_DIV(uint32_t value) { return static_cast<bool>(((value)>>7) & 1); }
extern const FieldDef g_fieldDef_MFP_UCR_CLOCK_DIV;


/* Register MFP_RSR ($fffa2b)*/
/* Field REC_ENABLE */
static const uint32_t MFP_RSR_REC_ENABLE_SHIFT = 0;
static const uint32_t MFP_RSR_REC_ENABLE_MASK = 1;
inline bool GetField_MFP_RSR_REC_ENABLE(uint32_t value) { return static_cast<bool>(((value)>>0) & 1); }
extern const FieldDef g_fieldDef_MFP_RSR_REC_ENABLE;

/* Field STRIP */
static const uint32_t MFP_RSR_STRIP_SHIFT = 1;
static const uint32_t MFP_RSR_STRIP_MASK = 1;
inline bool GetField_MFP_RSR_STRIP(uint32_t value) { return static_cast<bool>(((value)>>1) & 1); }
extern const FieldDef g_fieldDef_MFP_RSR_STRIP;

/* Field MATCH */
static const uint32_t MFP_RSR_MATCH_SHIFT = 2;
static const uint32_t MFP_RSR_MATCH_MASK = 1;
inline bool GetField_MFP_RSR_MATCH(uint32_t value) { return static_cast<bool>(((value)>>2) & 1); }
extern const FieldDef g_fieldDef_MFP_RSR_MATCH;

/* Field FOUND */
static const uint32_t MFP_RSR_FOUND_SHIFT = 3;
static const uint32_t MFP_RSR_FOUND_MASK = 1;
inline bool GetField_MFP_RSR_FOUND(uint32_t value) { return static_cast<bool>(((value)>>3) & 1); }
extern const FieldDef g_fieldDef_MFP_RSR_FOUND;

/* Field FRAME_ERR */
static const uint32_t MFP_RSR_FRAME_ERR_SHIFT = 4;
static const uint32_t MFP_RSR_FRAME_ERR_MASK = 1;
inline bool GetField_MFP_RSR_FRAME_ERR(uint32_t value) { return static_cast<bool>(((value)>>4) & 1); }
extern const FieldDef g_fieldDef_MFP_RSR_FRAME_ERR;

/* Field PARITY_ERR */
static const uint32_t MFP_RSR_PARITY_ERR_SHIFT = 5;
static const uint32_t MFP_RSR_PARITY_ERR_MASK = 1;
inline bool GetField_MFP_RSR_PARITY_ERR(uint32_t value) { return static_cast<bool>(((value)>>5) & 1); }
extern const FieldDef g_fieldDef_MFP_RSR_PARITY_ERR;

/* Field OVERRUN_ERR */
static const uint32_t MFP_RSR_OVERRUN_ERR_SHIFT = 6;
static const uint32_t MFP_RSR_OVERRUN_ERR_MASK = 1;
inline bool GetField_MFP_RSR_OVERRUN_ERR(uint32_t value) { return static_cast<bool>(((value)>>6) & 1); }
extern const FieldDef g_fieldDef_MFP_RSR_OVERRUN_ERR;

/* Field BUFFER_FULL */
static const uint32_t MFP_RSR_BUFFER_FULL_SHIFT = 7;
static const uint32_t MFP_RSR_BUFFER_FULL_MASK = 1;
inline bool GetField_MFP_RSR_BUFFER_FULL(uint32_t value) { return static_cast<bool>(((value)>>7) & 1); }
extern const FieldDef g_fieldDef_MFP_RSR_BUFFER_FULL;


/* Register MFP_TSR ($fffa2d)*/
/* Field TRANS_ENABLE */
static const uint32_t MFP_TSR_TRANS_ENABLE_SHIFT = 0;
static const uint32_t MFP_TSR_TRANS_ENABLE_MASK = 1;
inline bool GetField_MFP_TSR_TRANS_ENABLE(uint32_t value) { return static_cast<bool>(((value)>>0) & 1); }
extern const FieldDef g_fieldDef_MFP_TSR_TRANS_ENABLE;

/* Field LOW */
static const uint32_t MFP_TSR_LOW_SHIFT = 1;
static const uint32_t MFP_TSR_LOW_MASK = 1;
inline bool GetField_MFP_TSR_LOW(uint32_t value) { return static_cast<bool>(((value)>>1) & 1); }
extern const FieldDef g_fieldDef_MFP_TSR_LOW;

/* Field HIGH */
static const uint32_t MFP_TSR_HIGH_SHIFT = 2;
static const uint32_t MFP_TSR_HIGH_MASK = 1;
inline bool GetField_MFP_TSR_HIGH(uint32_t value) { return static_cast<bool>(((value)>>2) & 1); }
extern const FieldDef g_fieldDef_MFP_TSR_HIGH;

/* Field BREAK */
static const uint32_t MFP_TSR_BREAK_SHIFT = 3;
static const uint32_t MFP_TSR_BREAK_MASK = 1;
inline bool GetField_MFP_TSR_BREAK(uint32_t value) { return static_cast<bool>(((value)>>3) & 1); }
extern const FieldDef g_fieldDef_MFP_TSR_BREAK;

/* Field EOT */
static const uint32_t MFP_TSR_EOT_SHIFT = 4;
static const uint32_t MFP_TSR_EOT_MASK = 1;
inline bool GetField_MFP_TSR_EOT(uint32_t value) { return static_cast<bool>(((value)>>4) & 1); }
extern const FieldDef g_fieldDef_MFP_TSR_EOT;

/* Field AUTO_TURN */
static const uint32_t MFP_TSR_AUTO_TURN_SHIFT = 5;
static const uint32_t MFP_TSR_AUTO_TURN_MASK = 1;
inline bool GetField_MFP_TSR_AUTO_TURN(uint32_t value) { return static_cast<bool>(((value)>>5) & 1); }
extern const FieldDef g_fieldDef_MFP_TSR_AUTO_TURN;

/* Field UNDERRUN_ERR */
static const uint32_t MFP_TSR_UNDERRUN_ERR_SHIFT = 6;
static const uint32_t MFP_TSR_UNDERRUN_ERR_MASK = 1;
inline bool GetField_MFP_TSR_UNDERRUN_ERR(uint32_t value) { return static_cast<bool>(((value)>>6) & 1); }
extern const FieldDef g_fieldDef_MFP_TSR_UNDERRUN_ERR;

/* Field BUFFER_EMPTY */
static const uint32_t MFP_TSR_BUFFER_EMPTY_SHIFT = 7;
static const uint32_t MFP_TSR_BUFFER_EMPTY_MASK = 1;
inline bool GetField_MFP_TSR_BUFFER_EMPTY(uint32_t value) { return static_cast<bool>(((value)>>7) & 1); }
extern const FieldDef g_fieldDef_MFP_TSR_BUFFER_EMPTY;


/* Register MFP_UDR ($fffa2f)*/
/* Field ALL */
static const uint32_t MFP_UDR_ALL_SHIFT = 0;
static const uint32_t MFP_UDR_ALL_MASK = 255;
inline uint8_t GetField_MFP_UDR_ALL(uint32_t value) { return static_cast<uint8_t>(((value)>>0) & 255); }
extern const FieldDef g_fieldDef_MFP_UDR_ALL;


/* Register YM_MIXER ($7)*/
/* Field TONE_A_OFF */
static const uint32_t YM_MIXER_TONE_A_OFF_SHIFT = 0;
static const uint32_t YM_MIXER_TONE_A_OFF_MASK = 1;
inline bool GetField_YM_MIXER_TONE_A_OFF(uint32_t value) { return static_cast<bool>(((value)>>0) & 1); }
extern const FieldDef g_fieldDef_YM_MIXER_TONE_A_OFF;

/* Field TONE_B_OFF */
static const uint32_t YM_MIXER_TONE_B_OFF_SHIFT = 1;
static const uint32_t YM_MIXER_TONE_B_OFF_MASK = 1;
inline bool GetField_YM_MIXER_TONE_B_OFF(uint32_t value) { return static_cast<bool>(((value)>>1) & 1); }
extern const FieldDef g_fieldDef_YM_MIXER_TONE_B_OFF;

/* Field TONE_C_OFF */
static const uint32_t YM_MIXER_TONE_C_OFF_SHIFT = 2;
static const uint32_t YM_MIXER_TONE_C_OFF_MASK = 1;
inline bool GetField_YM_MIXER_TONE_C_OFF(uint32_t value) { return static_cast<bool>(((value)>>2) & 1); }
extern const FieldDef g_fieldDef_YM_MIXER_TONE_C_OFF;

/* Field NOISE_A_OFF */
static const uint32_t YM_MIXER_NOISE_A_OFF_SHIFT = 3;
static const uint32_t YM_MIXER_NOISE_A_OFF_MASK = 1;
inline bool GetField_YM_MIXER_NOISE_A_OFF(uint32_t value) { return static_cast<bool>(((value)>>3) & 1); }
extern const FieldDef g_fieldDef_YM_MIXER_NOISE_A_OFF;

/* Field NOISE_B_OFF */
static const uint32_t YM_MIXER_NOISE_B_OFF_SHIFT = 4;
static const uint32_t YM_MIXER_NOISE_B_OFF_MASK = 1;
inline bool GetField_YM_MIXER_NOISE_B_OFF(uint32_t value) { return static_cast<bool>(((value)>>4) & 1); }
extern const FieldDef g_fieldDef_YM_MIXER_NOISE_B_OFF;

/* Field NOISE_C_OFF */
static const uint32_t YM_MIXER_NOISE_C_OFF_SHIFT = 5;
static const uint32_t YM_MIXER_NOISE_C_OFF_MASK = 1;
inline bool GetField_YM_MIXER_NOISE_C_OFF(uint32_t value) { return static_cast<bool>(((value)>>5) & 1); }
extern const FieldDef g_fieldDef_YM_MIXER_NOISE_C_OFF;

/* Field PORT_A_OUT */
static const uint32_t YM_MIXER_PORT_A_OUT_SHIFT = 6;
static const uint32_t YM_MIXER_PORT_A_OUT_MASK = 1;
inline bool GetField_YM_MIXER_PORT_A_OUT(uint32_t value) { return static_cast<bool>(((value)>>6) & 1); }
extern const FieldDef g_fieldDef_YM_MIXER_PORT_A_OUT;

/* Field PORT_B_OUT */
static const uint32_t YM_MIXER_PORT_B_OUT_SHIFT = 7;
static const uint32_t YM_MIXER_PORT_B_OUT_MASK = 1;
inline bool GetField_YM_MIXER_PORT_B_OUT(uint32_t value) { return static_cast<bool>(((value)>>7) & 1); }
extern const FieldDef g_fieldDef_YM_MIXER_PORT_B_OUT;


/* Register YM_VOLUME_A ($8)*/
/* Field VOL */
static const uint32_t YM_VOLUME_A_VOL_SHIFT = 0;
static const uint32_t YM_VOLUME_A_VOL_MASK = 15;
inline uint8_t GetField_YM_VOLUME_A_VOL(uint32_t value) { return static_cast<uint8_t>(((value)>>0) & 15); }
extern const FieldDef g_fieldDef_YM_VOLUME_A_VOL;

/* Field ENVELOPE */
static const uint32_t YM_VOLUME_A_ENVELOPE_SHIFT = 4;
static const uint32_t YM_VOLUME_A_ENVELOPE_MASK = 1;
inline bool GetField_YM_VOLUME_A_ENVELOPE(uint32_t value) { return static_cast<bool>(((value)>>4) & 1); }
extern const FieldDef g_fieldDef_YM_VOLUME_A_ENVELOPE;


/* Register YM_VOLUME_B ($9)*/
/* Field VOL */
static const uint32_t YM_VOLUME_B_VOL_SHIFT = 0;
static const uint32_t YM_VOLUME_B_VOL_MASK = 15;
inline uint8_t GetField_YM_VOLUME_B_VOL(uint32_t value) { return static_cast<uint8_t>(((value)>>0) & 15); }
extern const FieldDef g_fieldDef_YM_VOLUME_B_VOL;

/* Field ENVELOPE */
static const uint32_t YM_VOLUME_B_ENVELOPE_SHIFT = 4;
static const uint32_t YM_VOLUME_B_ENVELOPE_MASK = 1;
inline bool GetField_YM_VOLUME_B_ENVELOPE(uint32_t value) { return static_cast<bool>(((value)>>4) & 1); }
extern const FieldDef g_fieldDef_YM_VOLUME_B_ENVELOPE;


/* Register YM_VOLUME_C ($a)*/
/* Field VOL */
static const uint32_t YM_VOLUME_C_VOL_SHIFT = 0;
static const uint32_t YM_VOLUME_C_VOL_MASK = 15;
inline uint8_t GetField_YM_VOLUME_C_VOL(uint32_t value) { return static_cast<uint8_t>(((value)>>0) & 15); }
extern const FieldDef g_fieldDef_YM_VOLUME_C_VOL;

/* Field ENVELOPE */
static const uint32_t YM_VOLUME_C_ENVELOPE_SHIFT = 4;
static const uint32_t YM_VOLUME_C_ENVELOPE_MASK = 1;
inline bool GetField_YM_VOLUME_C_ENVELOPE(uint32_t value) { return static_cast<bool>(((value)>>4) & 1); }
extern const FieldDef g_fieldDef_YM_VOLUME_C_ENVELOPE;


/* Register YM_PERIOD_ENV_SHAPE ($d)*/
/* Field SHAPE */
static const uint32_t YM_PERIOD_ENV_SHAPE_SHAPE_SHIFT = 0;
static const uint32_t YM_PERIOD_ENV_SHAPE_SHAPE_MASK = 15;
inline ENV_SHAPE GetField_YM_PERIOD_ENV_SHAPE_SHAPE(uint32_t value) { return static_cast<ENV_SHAPE>(((value)>>0) & 15); }
extern const FieldDef g_fieldDef_YM_PERIOD_ENV_SHAPE_SHAPE;


/* Register BLT_SRC_INC_X ($ff8a20)*/
/* Field ALL */
static const uint32_t BLT_SRC_INC_X_ALL_SHIFT = 0;
static const uint32_t BLT_SRC_INC_X_ALL_MASK = 65535;
inline int16_t GetField_BLT_SRC_INC_X_ALL(uint32_t value) { return static_cast<int16_t>(((value)>>0) & 65535); }
extern const FieldDef g_fieldDef_BLT_SRC_INC_X_ALL;


/* Register BLT_SRC_INC_Y ($ff8a22)*/
/* Field ALL */
static const uint32_t BLT_SRC_INC_Y_ALL_SHIFT = 0;
static const uint32_t BLT_SRC_INC_Y_ALL_MASK = 65535;
inline int16_t GetField_BLT_SRC_INC_Y_ALL(uint32_t value) { return static_cast<int16_t>(((value)>>0) & 65535); }
extern const FieldDef g_fieldDef_BLT_SRC_INC_Y_ALL;


/* Register BLT_SRC_ADDR ($ff8a24)*/
/* Field ALL */
static const uint32_t BLT_SRC_ADDR_ALL_SHIFT = 0;
static const uint32_t BLT_SRC_ADDR_ALL_MASK = 16777215;
inline uint32_t GetField_BLT_SRC_ADDR_ALL(uint32_t value) { return static_cast<uint32_t>(((value)>>0) & 16777215); }
extern const FieldDef g_fieldDef_BLT_SRC_ADDR_ALL;


/* Register BLT_ENDMASK_1 ($ff8a28)*/
/* Field ALL */
static const uint32_t BLT_ENDMASK_1_ALL_SHIFT = 0;
static const uint32_t BLT_ENDMASK_1_ALL_MASK = 65535;
inline int16_t GetField_BLT_ENDMASK_1_ALL(uint32_t value) { return static_cast<int16_t>(((value)>>0) & 65535); }
extern const FieldDef g_fieldDef_BLT_ENDMASK_1_ALL;


/* Register BLT_ENDMASK_2 ($ff8a2a)*/
/* Field ALL */
static const uint32_t BLT_ENDMASK_2_ALL_SHIFT = 0;
static const uint32_t BLT_ENDMASK_2_ALL_MASK = 65535;
inline int16_t GetField_BLT_ENDMASK_2_ALL(uint32_t value) { return static_cast<int16_t>(((value)>>0) & 65535); }
extern const FieldDef g_fieldDef_BLT_ENDMASK_2_ALL;


/* Register BLT_ENDMASK_3 ($ff8a2c)*/
/* Field ALL */
static const uint32_t BLT_ENDMASK_3_ALL_SHIFT = 0;
static const uint32_t BLT_ENDMASK_3_ALL_MASK = 65535;
inline int16_t GetField_BLT_ENDMASK_3_ALL(uint32_t value) { return static_cast<int16_t>(((value)>>0) & 65535); }
extern const FieldDef g_fieldDef_BLT_ENDMASK_3_ALL;


/* Register BLT_DST_INC_X ($ff8a2e)*/
/* Field ALL */
static const uint32_t BLT_DST_INC_X_ALL_SHIFT = 0;
static const uint32_t BLT_DST_INC_X_ALL_MASK = 65535;
inline int16_t GetField_BLT_DST_INC_X_ALL(uint32_t value) { return static_cast<int16_t>(((value)>>0) & 65535); }
extern const FieldDef g_fieldDef_BLT_DST_INC_X_ALL;


/* Register BLT_DST_INC_Y ($ff8a30)*/
/* Field ALL */
static const uint32_t BLT_DST_INC_Y_ALL_SHIFT = 0;
static const uint32_t BLT_DST_INC_Y_ALL_MASK = 65535;
inline int16_t GetField_BLT_DST_INC_Y_ALL(uint32_t value) { return static_cast<int16_t>(((value)>>0) & 65535); }
extern const FieldDef g_fieldDef_BLT_DST_INC_Y_ALL;


/* Register BLT_DST_ADDR ($ff8a32)*/
/* Field ALL */
static const uint32_t BLT_DST_ADDR_ALL_SHIFT = 0;
static const uint32_t BLT_DST_ADDR_ALL_MASK = 16777215;
inline uint32_t GetField_BLT_DST_ADDR_ALL(uint32_t value) { return static_cast<uint32_t>(((value)>>0) & 16777215); }
extern const FieldDef g_fieldDef_BLT_DST_ADDR_ALL;


/* Register BLT_XCOUNT ($ff8a36)*/
/* Field ALL */
static const uint32_t BLT_XCOUNT_ALL_SHIFT = 0;
static const uint32_t BLT_XCOUNT_ALL_MASK = 65535;
inline int16_t GetField_BLT_XCOUNT_ALL(uint32_t value) { return static_cast<int16_t>(((value)>>0) & 65535); }
extern const FieldDef g_fieldDef_BLT_XCOUNT_ALL;


/* Register BLT_YCOUNT ($ff8a38)*/
/* Field ALL */
static const uint32_t BLT_YCOUNT_ALL_SHIFT = 0;
static const uint32_t BLT_YCOUNT_ALL_MASK = 65535;
inline int16_t GetField_BLT_YCOUNT_ALL(uint32_t value) { return static_cast<int16_t>(((value)>>0) & 65535); }
extern const FieldDef g_fieldDef_BLT_YCOUNT_ALL;


/* Register BLT_HALFTONE_OP ($ff8a3a)*/
/* Field OP */
static const uint32_t BLT_HALFTONE_OP_OP_SHIFT = 0;
static const uint32_t BLT_HALFTONE_OP_OP_MASK = 3;
inline BLT_HOP GetField_BLT_HALFTONE_OP_OP(uint32_t value) { return static_cast<BLT_HOP>(((value)>>0) & 3); }
extern const FieldDef g_fieldDef_BLT_HALFTONE_OP_OP;


/* Register BLT_LOGICAL_OP ($ff8a3b)*/
/* Field OP */
static const uint32_t BLT_LOGICAL_OP_OP_SHIFT = 0;
static const uint32_t BLT_LOGICAL_OP_OP_MASK = 15;
inline BLT_OP GetField_BLT_LOGICAL_OP_OP(uint32_t value) { return static_cast<BLT_OP>(((value)>>0) & 15); }
extern const FieldDef g_fieldDef_BLT_LOGICAL_OP_OP;


/* Register BLT_CTRL_1 ($ff8a3c)*/
/* Field HALFTONE_LINE */
static const uint32_t BLT_CTRL_1_HALFTONE_LINE_SHIFT = 0;
static const uint32_t BLT_CTRL_1_HALFTONE_LINE_MASK = 15;
inline uint8_t GetField_BLT_CTRL_1_HALFTONE_LINE(uint32_t value) { return static_cast<uint8_t>(((value)>>0) & 15); }
extern const FieldDef g_fieldDef_BLT_CTRL_1_HALFTONE_LINE;

/* Field SMUDGE */
static const uint32_t BLT_CTRL_1_SMUDGE_SHIFT = 5;
static const uint32_t BLT_CTRL_1_SMUDGE_MASK = 1;
inline bool GetField_BLT_CTRL_1_SMUDGE(uint32_t value) { return static_cast<bool>(((value)>>5) & 1); }
extern const FieldDef g_fieldDef_BLT_CTRL_1_SMUDGE;

/* Field HOG */
static const uint32_t BLT_CTRL_1_HOG_SHIFT = 6;
static const uint32_t BLT_CTRL_1_HOG_MASK = 1;
inline bool GetField_BLT_CTRL_1_HOG(uint32_t value) { return static_cast<bool>(((value)>>6) & 1); }
extern const FieldDef g_fieldDef_BLT_CTRL_1_HOG;

/* Field BUSY */
static const uint32_t BLT_CTRL_1_BUSY_SHIFT = 7;
static const uint32_t BLT_CTRL_1_BUSY_MASK = 1;
inline bool GetField_BLT_CTRL_1_BUSY(uint32_t value) { return static_cast<bool>(((value)>>7) & 1); }
extern const FieldDef g_fieldDef_BLT_CTRL_1_BUSY;


/* Register BLT_CTRL_2 ($ff8a3d)*/
/* Field SKEW */
static const uint32_t BLT_CTRL_2_SKEW_SHIFT = 0;
static const uint32_t BLT_CTRL_2_SKEW_MASK = 15;
inline uint8_t GetField_BLT_CTRL_2_SKEW(uint32_t value) { return static_cast<uint8_t>(((value)>>0) & 15); }
extern const FieldDef g_fieldDef_BLT_CTRL_2_SKEW;

/* Field NFSR */
static const uint32_t BLT_CTRL_2_NFSR_SHIFT = 6;
static const uint32_t BLT_CTRL_2_NFSR_MASK = 1;
inline bool GetField_BLT_CTRL_2_NFSR(uint32_t value) { return static_cast<bool>(((value)>>6) & 1); }
extern const FieldDef g_fieldDef_BLT_CTRL_2_NFSR;

/* Field FXSR */
static const uint32_t BLT_CTRL_2_FXSR_SHIFT = 7;
static const uint32_t BLT_CTRL_2_FXSR_MASK = 1;
inline bool GetField_BLT_CTRL_2_FXSR(uint32_t value) { return static_cast<bool>(((value)>>7) & 1); }
extern const FieldDef g_fieldDef_BLT_CTRL_2_FXSR;


/* Register DMA_BUFFER_INTERRUPTS ($ff8900)*/
/* Field i7_REPLAY */
static const uint32_t DMA_BUFFER_INTERRUPTS_i7_REPLAY_SHIFT = 0;
static const uint32_t DMA_BUFFER_INTERRUPTS_i7_REPLAY_MASK = 1;
inline bool GetField_DMA_BUFFER_INTERRUPTS_i7_REPLAY(uint32_t value) { return static_cast<bool>(((value)>>0) & 1); }
extern const FieldDef g_fieldDef_DMA_BUFFER_INTERRUPTS_i7_REPLAY;

/* Field I7_RECORD */
static const uint32_t DMA_BUFFER_INTERRUPTS_I7_RECORD_SHIFT = 1;
static const uint32_t DMA_BUFFER_INTERRUPTS_I7_RECORD_MASK = 1;
inline bool GetField_DMA_BUFFER_INTERRUPTS_I7_RECORD(uint32_t value) { return static_cast<bool>(((value)>>1) & 1); }
extern const FieldDef g_fieldDef_DMA_BUFFER_INTERRUPTS_I7_RECORD;

/* Field TIMERA_REPLAY */
static const uint32_t DMA_BUFFER_INTERRUPTS_TIMERA_REPLAY_SHIFT = 2;
static const uint32_t DMA_BUFFER_INTERRUPTS_TIMERA_REPLAY_MASK = 1;
inline bool GetField_DMA_BUFFER_INTERRUPTS_TIMERA_REPLAY(uint32_t value) { return static_cast<bool>(((value)>>2) & 1); }
extern const FieldDef g_fieldDef_DMA_BUFFER_INTERRUPTS_TIMERA_REPLAY;

/* Field TIMERA_RECORD */
static const uint32_t DMA_BUFFER_INTERRUPTS_TIMERA_RECORD_SHIFT = 3;
static const uint32_t DMA_BUFFER_INTERRUPTS_TIMERA_RECORD_MASK = 1;
inline bool GetField_DMA_BUFFER_INTERRUPTS_TIMERA_RECORD(uint32_t value) { return static_cast<bool>(((value)>>3) & 1); }
extern const FieldDef g_fieldDef_DMA_BUFFER_INTERRUPTS_TIMERA_RECORD;


/* Register DMA_CONTROL ($ff8901)*/
/* Field REPLAY */
static const uint32_t DMA_CONTROL_REPLAY_SHIFT = 0;
static const uint32_t DMA_CONTROL_REPLAY_MASK = 1;
inline bool GetField_DMA_CONTROL_REPLAY(uint32_t value) { return static_cast<bool>(((value)>>0) & 1); }
extern const FieldDef g_fieldDef_DMA_CONTROL_REPLAY;

/* Field LOOP_REPLAY */
static const uint32_t DMA_CONTROL_LOOP_REPLAY_SHIFT = 1;
static const uint32_t DMA_CONTROL_LOOP_REPLAY_MASK = 1;
inline bool GetField_DMA_CONTROL_LOOP_REPLAY(uint32_t value) { return static_cast<bool>(((value)>>1) & 1); }
extern const FieldDef g_fieldDef_DMA_CONTROL_LOOP_REPLAY;

/* Field RECORD */
static const uint32_t DMA_CONTROL_RECORD_SHIFT = 4;
static const uint32_t DMA_CONTROL_RECORD_MASK = 1;
inline bool GetField_DMA_CONTROL_RECORD(uint32_t value) { return static_cast<bool>(((value)>>4) & 1); }
extern const FieldDef g_fieldDef_DMA_CONTROL_RECORD;

/* Field LOOP_RECORD */
static const uint32_t DMA_CONTROL_LOOP_RECORD_SHIFT = 5;
static const uint32_t DMA_CONTROL_LOOP_RECORD_MASK = 1;
inline bool GetField_DMA_CONTROL_LOOP_RECORD(uint32_t value) { return static_cast<bool>(((value)>>5) & 1); }
extern const FieldDef g_fieldDef_DMA_CONTROL_LOOP_RECORD;

/* Field SELECT */
static const uint32_t DMA_CONTROL_SELECT_SHIFT = 7;
static const uint32_t DMA_CONTROL_SELECT_MASK = 1;
inline bool GetField_DMA_CONTROL_SELECT(uint32_t value) { return static_cast<bool>(((value)>>7) & 1); }
extern const FieldDef g_fieldDef_DMA_CONTROL_SELECT;


/* Register DMA_SND_MODE ($ff8921)*/
/* Field DMA_FREQ */
static const uint32_t DMA_SND_MODE_DMA_FREQ_SHIFT = 0;
static const uint32_t DMA_SND_MODE_DMA_FREQ_MASK = 3;
inline DMA_FREQ GetField_DMA_SND_MODE_DMA_FREQ(uint32_t value) { return static_cast<DMA_FREQ>(((value)>>0) & 3); }
extern const FieldDef g_fieldDef_DMA_SND_MODE_DMA_FREQ;

/* Field FORMAT */
static const uint32_t DMA_SND_MODE_FORMAT_SHIFT = 7;
static const uint32_t DMA_SND_MODE_FORMAT_MASK = 1;
inline IS_STEREO GetField_DMA_SND_MODE_FORMAT(uint32_t value) { return static_cast<IS_STEREO>(((value)>>7) & 1); }
extern const FieldDef g_fieldDef_DMA_SND_MODE_FORMAT;


/* Register Field Sets */

extern const FieldDef* g_regFieldsDef_MMU_CONFIG[];
extern const FieldDef* g_regFieldsDef_VID_BASE_HIGH[];
extern const FieldDef* g_regFieldsDef_VID_BASE_MID[];
extern const FieldDef* g_regFieldsDef_VID_BASE_LOW_STE[];
extern const FieldDef* g_regFieldsDef_VID_SCANLINE_OFFSET_STE[];
extern const FieldDef* g_regFieldsDef_VID_HORIZ_SCROLL_STE[];
extern const FieldDef* g_regFieldsDef_VID_SYNC_MODE[];
extern const FieldDef* g_regFieldsDef_VID_PAL_0[];
extern const FieldDef* g_regFieldsDef_VID_SHIFTER_RES[];
extern const FieldDef* g_regFieldsDef_FDC_ACCESS[];
extern const FieldDef* g_regFieldsDef_FDC_STATUS[];
extern const FieldDef* g_regFieldsDef_FDC_DMA_BASE_HIGH[];
extern const FieldDef* g_regFieldsDef_FDC_DMA_BASE_MID[];
extern const FieldDef* g_regFieldsDef_FDC_DMA_BASE_LOW[];
extern const FieldDef* g_regFieldsDef_MFP_GPIP[];
extern const FieldDef* g_regFieldsDef_MFP_AER[];
extern const FieldDef* g_regFieldsDef_MFP_DDR[];
extern const FieldDef* g_regFieldsDef_MFP_IERA[];
extern const FieldDef* g_regFieldsDef_MFP_IERB[];
extern const FieldDef* g_regFieldsDef_MFP_IPRA[];
extern const FieldDef* g_regFieldsDef_MFP_IPRB[];
extern const FieldDef* g_regFieldsDef_MFP_ISRA[];
extern const FieldDef* g_regFieldsDef_MFP_ISRB[];
extern const FieldDef* g_regFieldsDef_MFP_IMRA[];
extern const FieldDef* g_regFieldsDef_MFP_IMRB[];
extern const FieldDef* g_regFieldsDef_MFP_VR[];
extern const FieldDef* g_regFieldsDef_MFP_TACR[];
extern const FieldDef* g_regFieldsDef_MFP_TBCR[];
extern const FieldDef* g_regFieldsDef_MFP_TCDCR[];
extern const FieldDef* g_regFieldsDef_MFP_TADR[];
extern const FieldDef* g_regFieldsDef_MFP_TBDR[];
extern const FieldDef* g_regFieldsDef_MFP_TCDR[];
extern const FieldDef* g_regFieldsDef_MFP_TDDR[];
extern const FieldDef* g_regFieldsDef_MFP_SCR[];
extern const FieldDef* g_regFieldsDef_MFP_UCR[];
extern const FieldDef* g_regFieldsDef_MFP_RSR[];
extern const FieldDef* g_regFieldsDef_MFP_TSR[];
extern const FieldDef* g_regFieldsDef_MFP_UDR[];
extern const FieldDef* g_regFieldsDef_YM_MIXER[];
extern const FieldDef* g_regFieldsDef_YM_VOLUME_A[];
extern const FieldDef* g_regFieldsDef_YM_VOLUME_B[];
extern const FieldDef* g_regFieldsDef_YM_VOLUME_C[];
extern const FieldDef* g_regFieldsDef_YM_PERIOD_ENV_SHAPE[];
extern const FieldDef* g_regFieldsDef_BLT_SRC_INC_X[];
extern const FieldDef* g_regFieldsDef_BLT_SRC_INC_Y[];
extern const FieldDef* g_regFieldsDef_BLT_SRC_ADDR[];
extern const FieldDef* g_regFieldsDef_BLT_ENDMASK_1[];
extern const FieldDef* g_regFieldsDef_BLT_ENDMASK_2[];
extern const FieldDef* g_regFieldsDef_BLT_ENDMASK_3[];
extern const FieldDef* g_regFieldsDef_BLT_DST_INC_X[];
extern const FieldDef* g_regFieldsDef_BLT_DST_INC_Y[];
extern const FieldDef* g_regFieldsDef_BLT_DST_ADDR[];
extern const FieldDef* g_regFieldsDef_BLT_XCOUNT[];
extern const FieldDef* g_regFieldsDef_BLT_YCOUNT[];
extern const FieldDef* g_regFieldsDef_BLT_HALFTONE_OP[];
extern const FieldDef* g_regFieldsDef_BLT_LOGICAL_OP[];
extern const FieldDef* g_regFieldsDef_BLT_CTRL_1[];
extern const FieldDef* g_regFieldsDef_BLT_CTRL_2[];
extern const FieldDef* g_regFieldsDef_DMA_BUFFER_INTERRUPTS[];
extern const FieldDef* g_regFieldsDef_DMA_CONTROL[];
extern const FieldDef* g_regFieldsDef_DMA_SND_MODE[];
} // namespace
#endif
