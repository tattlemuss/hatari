/* Autogenerated file */

#include "regs_st.h"

namespace Regs {

const char* GetString(MMU_BANK val)
{
	if (val==MMU_BANK::SIZE_128K) return "128K";
	if (val==MMU_BANK::SIZE_512K) return "512K";
	if (val==MMU_BANK::SIZE_2MB) return "2MB";
	if (val==MMU_BANK::SIZE_RESERVED) return "reserved";
	return "?";
}
const char* GetString(RESOLUTION val)
{
	if (val==RESOLUTION::LOW) return "ST-Low";
	if (val==RESOLUTION::MEDIUM) return "ST-Medium";
	if (val==RESOLUTION::HIGH) return "ST-High";
	return "?";
}
const char* GetString(SYNC_RATE val)
{
	if (val==SYNC_RATE::HZ_60) return "60Hz";
	if (val==SYNC_RATE::HZ_50) return "50Hz";
	return "?";
}
const char* GetString(SYNC_TYPE val)
{
	if (val==SYNC_TYPE::INTERNAL) return "Internal Sync";
	if (val==SYNC_TYPE::EXTERNAL) return "External Sync";
	return "?";
}
const char* GetString(TIMER_MODE_A val)
{
	if (val==TIMER_MODE_A::STOP) return "Stopped";
	if (val==TIMER_MODE_A::DELAY_4) return "Delay mode, divide by 4";
	if (val==TIMER_MODE_A::DELAY_10) return "Delay mode, divide by 10";
	if (val==TIMER_MODE_A::DELAY_16) return "Delay mode, divide by 16";
	if (val==TIMER_MODE_A::DELAY_50) return "Delay mode, divide by 50";
	if (val==TIMER_MODE_A::DELAY_64) return "Delay mode, divide by 64";
	if (val==TIMER_MODE_A::DELAY_100) return "Delay mode, divide by 100";
	if (val==TIMER_MODE_A::DELAY_200) return "Delay mode, divide by 200";
	if (val==TIMER_MODE_A::EVENT) return "Event count mode";
	if (val==TIMER_MODE_A::PULSE_4) return "Pulse extension mode, divide by 4";
	if (val==TIMER_MODE_A::PULSE_10) return "Pulse extension mode, divide by 10";
	if (val==TIMER_MODE_A::PULSE_16) return "Pulse extension mode, divide by 16";
	if (val==TIMER_MODE_A::PULSE_50) return "Pulse extension mode, divide by 50";
	if (val==TIMER_MODE_A::PULSE_64) return "Pulse extension mode, divide by 64";
	if (val==TIMER_MODE_A::PULSE_100) return "Pulse extension mode, divide by 100";
	if (val==TIMER_MODE_A::PULSE_200) return "Pulse extension mode, divide by 200";
	return "?";
}
const char* GetString(TIMER_MODE_B val)
{
	if (val==TIMER_MODE_B::STOP) return "Stopped";
	if (val==TIMER_MODE_B::DELAY_4) return "Delay mode, divide by 4";
	if (val==TIMER_MODE_B::DELAY_10) return "Delay mode, divide by 10";
	if (val==TIMER_MODE_B::DELAY_16) return "Delay mode, divide by 16";
	if (val==TIMER_MODE_B::DELAY_50) return "Delay mode, divide by 50";
	if (val==TIMER_MODE_B::DELAY_64) return "Delay mode, divide by 64";
	if (val==TIMER_MODE_B::DELAY_100) return "Delay mode, divide by 100";
	if (val==TIMER_MODE_B::DELAY_200) return "Delay mode, divide by 200";
	if (val==TIMER_MODE_B::EVENT) return "Event count mode (HBL events)";
	if (val==TIMER_MODE_B::PULSE_4) return "Pulse extension mode, divide by 4";
	if (val==TIMER_MODE_B::PULSE_10) return "Pulse extension mode, divide by 10";
	if (val==TIMER_MODE_B::PULSE_16) return "Pulse extension mode, divide by 16";
	if (val==TIMER_MODE_B::PULSE_50) return "Pulse extension mode, divide by 50";
	if (val==TIMER_MODE_B::PULSE_64) return "Pulse extension mode, divide by 64";
	if (val==TIMER_MODE_B::PULSE_100) return "Pulse extension mode, divide by 100";
	if (val==TIMER_MODE_B::PULSE_200) return "Pulse extension mode, divide by 200";
	return "?";
}
const char* GetString(TIMER_MODE_CD val)
{
	if (val==TIMER_MODE_CD::STOP) return "Stopped";
	if (val==TIMER_MODE_CD::DELAY_4) return "Delay mode, divide by 4";
	if (val==TIMER_MODE_CD::DELAY_10) return "Delay mode, divide by 10";
	if (val==TIMER_MODE_CD::DELAY_16) return "Delay mode, divide by 16";
	if (val==TIMER_MODE_CD::DELAY_50) return "Delay mode, divide by 50";
	if (val==TIMER_MODE_CD::DELAY_64) return "Delay mode, divide by 64";
	if (val==TIMER_MODE_CD::DELAY_100) return "Delay mode, divide by 100";
	if (val==TIMER_MODE_CD::DELAY_200) return "Delay mode, divide by 200";
	return "?";
}
const char* GetString(ENDINT val)
{
	if (val==ENDINT::AUTO) return "Automatic";
	if (val==ENDINT::SOFTWARE) return "Software";
	return "?";
}
const char* GetString(USARTLEN val)
{
	if (val==USARTLEN::LEN_8) return "8 Bits";
	if (val==USARTLEN::LEN_7) return "7 Bits";
	if (val==USARTLEN::LEN_6) return "6 Bits";
	if (val==USARTLEN::LEN_5) return "5 Bits";
	return "?";
}
const char* GetString(ENV_SHAPE val)
{
	if (val==ENV_SHAPE::ENV_0000) return "\\___";
	if (val==ENV_SHAPE::ENV_0001) return "\\___";
	if (val==ENV_SHAPE::ENV_0010) return "\\___";
	if (val==ENV_SHAPE::ENV_0011) return "\\___";
	if (val==ENV_SHAPE::ENV_0100) return "/|__";
	if (val==ENV_SHAPE::ENV_0101) return "/|__";
	if (val==ENV_SHAPE::ENV_0110) return "/|__";
	if (val==ENV_SHAPE::ENV_0111) return "/|__";
	if (val==ENV_SHAPE::ENV_1000) return "\\|\\|";
	if (val==ENV_SHAPE::ENV_1001) return "\\___";
	if (val==ENV_SHAPE::ENV_1010) return "\\/\\/";
	if (val==ENV_SHAPE::ENV_1011) return "\\|--";
	if (val==ENV_SHAPE::ENV_1100) return "/|/|";
	if (val==ENV_SHAPE::ENV_1101) return "/---";
	if (val==ENV_SHAPE::ENV_1110) return "/\\/\\";
	if (val==ENV_SHAPE::ENV_1111) return "/|__";
	return "?";
}
const char* GetString(BLT_HOP val)
{
	if (val==BLT_HOP::HOP_ONES) return "All Ones";
	if (val==BLT_HOP::HOP_HALFTONE) return "Halftone only";
	if (val==BLT_HOP::HOP_SOURCE) return "Source only";
	if (val==BLT_HOP::HOP_SOURCE_AND_HALFTONE) return "Source AND halftone";
	return "?";
}
const char* GetString(BLT_OP val)
{
	if (val==BLT_OP::ZERO) return "All zeros";
	if (val==BLT_OP::AND) return "Source AND destination";
	if (val==BLT_OP::AND_NOT) return "Source AND NOT destination";
	if (val==BLT_OP::SOURCE) return "Source";
	if (val==BLT_OP::NOT_AND) return "NOT source AND destination";
	if (val==BLT_OP::DEST) return "Destination";
	if (val==BLT_OP::XOR) return "Source XOR destination";
	if (val==BLT_OP::OR) return "Source OR destination";
	if (val==BLT_OP::NOT_AND_NOT) return "NOT source AND NOT destination";
	if (val==BLT_OP::NOT_XOR) return "NOT source XOR destination";
	if (val==BLT_OP::NOT_DEST) return "NOT destination";
	if (val==BLT_OP::OR_NOT_DEST) return "Source OR NOT destination";
	if (val==BLT_OP::NOT_SOURCE) return "NOT source";
	if (val==BLT_OP::NOT_SOURCE_OR) return "NOT source OR destination";
	if (val==BLT_OP::NOT_SOURCE_OR_NOT) return "NOT source OR NOT destination";
	if (val==BLT_OP::ONES) return "All ones";
	return "?";
}
const char* GetString(IS_STEREO val)
{
	if (val==IS_STEREO::MONO) return "Mono";
	if (val==IS_STEREO::STEREO) return "Stereo";
	return "?";
}
const char* GetString(DMA_FREQ val)
{
	if (val==DMA_FREQ::FREQ_6258) return "6258Hz (STE only)";
	if (val==DMA_FREQ::FREQ_12517) return "12517Hz";
	if (val==DMA_FREQ::FREQ_25033) return "25033Hz";
	if (val==DMA_FREQ::FREQ_50066) return "50066Hz";
	return "?";
}
const stgen::StringDef g_enumStringsMMU_BANK[] = {
	{ 0, "128K" },
	{ 1, "512K" },
	{ 2, "2MB" },
	{ 3, "reserved" },
	{ 0, nullptr }
};
const stgen::StringDef g_enumStringsRESOLUTION[] = {
	{ 0, "ST-Low" },
	{ 1, "ST-Medium" },
	{ 2, "ST-High" },
	{ 0, nullptr }
};
const stgen::StringDef g_enumStringsSYNC_RATE[] = {
	{ 0, "60Hz" },
	{ 1, "50Hz" },
	{ 0, nullptr }
};
const stgen::StringDef g_enumStringsSYNC_TYPE[] = {
	{ 0, "Internal Sync" },
	{ 1, "External Sync" },
	{ 0, nullptr }
};
const stgen::StringDef g_enumStringsTIMER_MODE_A[] = {
	{ 0, "Stopped" },
	{ 1, "Delay mode, divide by 4" },
	{ 2, "Delay mode, divide by 10" },
	{ 3, "Delay mode, divide by 16" },
	{ 4, "Delay mode, divide by 50" },
	{ 5, "Delay mode, divide by 64" },
	{ 6, "Delay mode, divide by 100" },
	{ 7, "Delay mode, divide by 200" },
	{ 8, "Event count mode" },
	{ 9, "Pulse extension mode, divide by 4" },
	{ 10, "Pulse extension mode, divide by 10" },
	{ 11, "Pulse extension mode, divide by 16" },
	{ 12, "Pulse extension mode, divide by 50" },
	{ 13, "Pulse extension mode, divide by 64" },
	{ 14, "Pulse extension mode, divide by 100" },
	{ 15, "Pulse extension mode, divide by 200" },
	{ 0, nullptr }
};
const stgen::StringDef g_enumStringsTIMER_MODE_B[] = {
	{ 0, "Stopped" },
	{ 1, "Delay mode, divide by 4" },
	{ 2, "Delay mode, divide by 10" },
	{ 3, "Delay mode, divide by 16" },
	{ 4, "Delay mode, divide by 50" },
	{ 5, "Delay mode, divide by 64" },
	{ 6, "Delay mode, divide by 100" },
	{ 7, "Delay mode, divide by 200" },
	{ 8, "Event count mode (HBL events)" },
	{ 9, "Pulse extension mode, divide by 4" },
	{ 10, "Pulse extension mode, divide by 10" },
	{ 11, "Pulse extension mode, divide by 16" },
	{ 12, "Pulse extension mode, divide by 50" },
	{ 13, "Pulse extension mode, divide by 64" },
	{ 14, "Pulse extension mode, divide by 100" },
	{ 15, "Pulse extension mode, divide by 200" },
	{ 0, nullptr }
};
const stgen::StringDef g_enumStringsTIMER_MODE_CD[] = {
	{ 0, "Stopped" },
	{ 1, "Delay mode, divide by 4" },
	{ 2, "Delay mode, divide by 10" },
	{ 3, "Delay mode, divide by 16" },
	{ 4, "Delay mode, divide by 50" },
	{ 5, "Delay mode, divide by 64" },
	{ 6, "Delay mode, divide by 100" },
	{ 7, "Delay mode, divide by 200" },
	{ 0, nullptr }
};
const stgen::StringDef g_enumStringsENDINT[] = {
	{ 0, "Automatic" },
	{ 1, "Software" },
	{ 0, nullptr }
};
const stgen::StringDef g_enumStringsUSARTLEN[] = {
	{ 0, "8 Bits" },
	{ 1, "7 Bits" },
	{ 2, "6 Bits" },
	{ 3, "5 Bits" },
	{ 0, nullptr }
};
const stgen::StringDef g_enumStringsENV_SHAPE[] = {
	{ 0, "\\___" },
	{ 1, "\\___" },
	{ 2, "\\___" },
	{ 3, "\\___" },
	{ 4, "/|__" },
	{ 5, "/|__" },
	{ 6, "/|__" },
	{ 7, "/|__" },
	{ 8, "\\|\\|" },
	{ 9, "\\___" },
	{ 10, "\\/\\/" },
	{ 11, "\\|--" },
	{ 12, "/|/|" },
	{ 13, "/---" },
	{ 14, "/\\/\\" },
	{ 15, "/|__" },
	{ 0, nullptr }
};
const stgen::StringDef g_enumStringsBLT_HOP[] = {
	{ 0, "All Ones" },
	{ 1, "Halftone only" },
	{ 2, "Source only" },
	{ 3, "Source AND halftone" },
	{ 0, nullptr }
};
const stgen::StringDef g_enumStringsBLT_OP[] = {
	{ 0, "All zeros" },
	{ 1, "Source AND destination" },
	{ 2, "Source AND NOT destination" },
	{ 3, "Source" },
	{ 4, "NOT source AND destination" },
	{ 5, "Destination" },
	{ 6, "Source XOR destination" },
	{ 7, "Source OR destination" },
	{ 8, "NOT source AND NOT destination" },
	{ 9, "NOT source XOR destination" },
	{ 10, "NOT destination" },
	{ 11, "Source OR NOT destination" },
	{ 12, "NOT source" },
	{ 13, "NOT source OR destination" },
	{ 14, "NOT source OR NOT destination" },
	{ 15, "All ones" },
	{ 0, nullptr }
};
const stgen::StringDef g_enumStringsIS_STEREO[] = {
	{ 0, "Mono" },
	{ 1, "Stereo" },
	{ 0, nullptr }
};
const stgen::StringDef g_enumStringsDMA_FREQ[] = {
	{ 0, "6258Hz (STE only)" },
	{ 1, "12517Hz" },
	{ 2, "25033Hz" },
	{ 3, "50066Hz" },
	{ 0, nullptr }
};
const stgen::FieldDef g_fieldDef_MMU_CONFIG_BANK1 = {
  MMU_CONFIG, MMU_CONFIG_BANK1_MASK,
  1, MMU_CONFIG_BANK1_SHIFT,
  "BANK1", g_enumStringsMMU_BANK, "Size of memory bank 1" };
const stgen::FieldDef g_fieldDef_MMU_CONFIG_BANK0 = {
  MMU_CONFIG, MMU_CONFIG_BANK0_MASK,
  1, MMU_CONFIG_BANK0_SHIFT,
  "BANK0", g_enumStringsMMU_BANK, "Size of memory bank 0" };
const stgen::FieldDef g_fieldDef_VID_BASE_HIGH_ALL = {
  VID_BASE_HIGH, VID_BASE_HIGH_ALL_MASK,
  1, VID_BASE_HIGH_ALL_SHIFT,
  "ALL", nullptr, "" };
const stgen::FieldDef g_fieldDef_VID_BASE_MID_ALL = {
  VID_BASE_MID, VID_BASE_MID_ALL_MASK,
  1, VID_BASE_MID_ALL_SHIFT,
  "ALL", nullptr, "" };
const stgen::FieldDef g_fieldDef_VID_BASE_LOW_STE_ALL = {
  VID_BASE_LOW_STE, VID_BASE_LOW_STE_ALL_MASK,
  1, VID_BASE_LOW_STE_ALL_SHIFT,
  "ALL", nullptr, "" };
const stgen::FieldDef g_fieldDef_VID_SCANLINE_OFFSET_STE_ALL = {
  VID_SCANLINE_OFFSET_STE, VID_SCANLINE_OFFSET_STE_ALL_MASK,
  1, VID_SCANLINE_OFFSET_STE_ALL_SHIFT,
  "ALL", nullptr, "Offset in words" };
const stgen::FieldDef g_fieldDef_VID_HORIZ_SCROLL_STE_PIXELS = {
  VID_HORIZ_SCROLL_STE, VID_HORIZ_SCROLL_STE_PIXELS_MASK,
  1, VID_HORIZ_SCROLL_STE_PIXELS_SHIFT,
  "PIXELS", nullptr, "Pixel shift amount (0-15)" };
const stgen::FieldDef g_fieldDef_VID_SYNC_MODE_TYPE = {
  VID_SYNC_MODE, VID_SYNC_MODE_TYPE_MASK,
  1, VID_SYNC_MODE_TYPE_SHIFT,
  "TYPE", g_enumStringsSYNC_TYPE, "internal/external" };
const stgen::FieldDef g_fieldDef_VID_SYNC_MODE_RATE = {
  VID_SYNC_MODE, VID_SYNC_MODE_RATE_MASK,
  1, VID_SYNC_MODE_RATE_SHIFT,
  "RATE", g_enumStringsSYNC_RATE, "0 - 60hz, 1 - 50hz" };
const stgen::FieldDef g_fieldDef_VID_PAL_0_BLUE_ST = {
  VID_PAL_0, VID_PAL_0_BLUE_ST_MASK,
  2, VID_PAL_0_BLUE_ST_SHIFT,
  "BLUE_ST", nullptr, "Blue" };
const stgen::FieldDef g_fieldDef_VID_PAL_0_BLUE_STE = {
  VID_PAL_0, VID_PAL_0_BLUE_STE_MASK,
  2, VID_PAL_0_BLUE_STE_SHIFT,
  "BLUE_STE", nullptr, "Blue" };
const stgen::FieldDef g_fieldDef_VID_PAL_0_GREEN_ST = {
  VID_PAL_0, VID_PAL_0_GREEN_ST_MASK,
  2, VID_PAL_0_GREEN_ST_SHIFT,
  "GREEN_ST", nullptr, "Green" };
const stgen::FieldDef g_fieldDef_VID_PAL_0_GREEN_STE = {
  VID_PAL_0, VID_PAL_0_GREEN_STE_MASK,
  2, VID_PAL_0_GREEN_STE_SHIFT,
  "GREEN_STE", nullptr, "Green" };
const stgen::FieldDef g_fieldDef_VID_PAL_0_RED_ST = {
  VID_PAL_0, VID_PAL_0_RED_ST_MASK,
  2, VID_PAL_0_RED_ST_SHIFT,
  "RED_ST", nullptr, "Red" };
const stgen::FieldDef g_fieldDef_VID_PAL_0_RED_STE = {
  VID_PAL_0, VID_PAL_0_RED_STE_MASK,
  2, VID_PAL_0_RED_STE_SHIFT,
  "RED_STE", nullptr, "Red" };
const stgen::FieldDef g_fieldDef_VID_SHIFTER_RES_RES = {
  VID_SHIFTER_RES, VID_SHIFTER_RES_RES_MASK,
  1, VID_SHIFTER_RES_RES_SHIFT,
  "RES", g_enumStringsRESOLUTION, "ST/STE Resolution (Low/Medium/High)" };
const stgen::FieldDef g_fieldDef_FDC_ACCESS_ALL = {
  FDC_ACCESS, FDC_ACCESS_ALL_MASK,
  2, FDC_ACCESS_ALL_SHIFT,
  "ALL", nullptr, "" };
const stgen::FieldDef g_fieldDef_FDC_STATUS_ERROR = {
  FDC_STATUS, FDC_STATUS_ERROR_MASK,
  2, FDC_STATUS_ERROR_SHIFT,
  "ERROR", nullptr, "Error status" };
const stgen::FieldDef g_fieldDef_FDC_STATUS_SECT_CNT = {
  FDC_STATUS, FDC_STATUS_SECT_CNT_MASK,
  2, FDC_STATUS_SECT_CNT_SHIFT,
  "SECT_CNT", nullptr, "0 - sector count null,1 - not null" };
const stgen::FieldDef g_fieldDef_FDC_STATUS_DATA_REQ = {
  FDC_STATUS, FDC_STATUS_DATA_REQ_MASK,
  2, FDC_STATUS_DATA_REQ_SHIFT,
  "DATA_REQ", nullptr, "FDC DATA REQUEST condition" };
const stgen::FieldDef g_fieldDef_FDC_DMA_BASE_HIGH_ALL = {
  FDC_DMA_BASE_HIGH, FDC_DMA_BASE_HIGH_ALL_MASK,
  1, FDC_DMA_BASE_HIGH_ALL_SHIFT,
  "ALL", nullptr, "" };
const stgen::FieldDef g_fieldDef_FDC_DMA_BASE_MID_ALL = {
  FDC_DMA_BASE_MID, FDC_DMA_BASE_MID_ALL_MASK,
  1, FDC_DMA_BASE_MID_ALL_SHIFT,
  "ALL", nullptr, "" };
const stgen::FieldDef g_fieldDef_FDC_DMA_BASE_LOW_ALL = {
  FDC_DMA_BASE_LOW, FDC_DMA_BASE_LOW_ALL_MASK,
  1, FDC_DMA_BASE_LOW_ALL_SHIFT,
  "ALL", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_GPIP_ALL = {
  MFP_GPIP, MFP_GPIP_ALL_MASK,
  1, MFP_GPIP_ALL_SHIFT,
  "ALL", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_AER_CENT_BUSY = {
  MFP_AER, MFP_AER_CENT_BUSY_MASK,
  1, MFP_AER_CENT_BUSY_SHIFT,
  "CENT_BUSY", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_AER_RS232_DCD = {
  MFP_AER, MFP_AER_RS232_DCD_MASK,
  1, MFP_AER_RS232_DCD_SHIFT,
  "RS232_DCD", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_AER_RS232_CTS = {
  MFP_AER, MFP_AER_RS232_CTS_MASK,
  1, MFP_AER_RS232_CTS_SHIFT,
  "RS232_CTS", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_AER_KBD_MIDI = {
  MFP_AER, MFP_AER_KBD_MIDI_MASK,
  1, MFP_AER_KBD_MIDI_SHIFT,
  "KBD_MIDI", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_AER_FDC_HDC = {
  MFP_AER, MFP_AER_FDC_HDC_MASK,
  1, MFP_AER_FDC_HDC_SHIFT,
  "FDC_HDC", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_AER_RS232_RING = {
  MFP_AER, MFP_AER_RS232_RING_MASK,
  1, MFP_AER_RS232_RING_SHIFT,
  "RS232_RING", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_AER_MONO = {
  MFP_AER, MFP_AER_MONO_MASK,
  1, MFP_AER_MONO_SHIFT,
  "MONO", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_DDR_CENT_BUSY = {
  MFP_DDR, MFP_DDR_CENT_BUSY_MASK,
  1, MFP_DDR_CENT_BUSY_SHIFT,
  "CENT_BUSY", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_DDR_RS232_DCD = {
  MFP_DDR, MFP_DDR_RS232_DCD_MASK,
  1, MFP_DDR_RS232_DCD_SHIFT,
  "RS232_DCD", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_DDR_RS232_CTS = {
  MFP_DDR, MFP_DDR_RS232_CTS_MASK,
  1, MFP_DDR_RS232_CTS_SHIFT,
  "RS232_CTS", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_DDR_KBD_MIDI = {
  MFP_DDR, MFP_DDR_KBD_MIDI_MASK,
  1, MFP_DDR_KBD_MIDI_SHIFT,
  "KBD_MIDI", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_DDR_FDC_HDC = {
  MFP_DDR, MFP_DDR_FDC_HDC_MASK,
  1, MFP_DDR_FDC_HDC_SHIFT,
  "FDC_HDC", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_DDR_RS232_RING = {
  MFP_DDR, MFP_DDR_RS232_RING_MASK,
  1, MFP_DDR_RS232_RING_SHIFT,
  "RS232_RING", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_DDR_MONO = {
  MFP_DDR, MFP_DDR_MONO_MASK,
  1, MFP_DDR_MONO_SHIFT,
  "MONO", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IERA_TIMER_B = {
  MFP_IERA, MFP_IERA_TIMER_B_MASK,
  1, MFP_IERA_TIMER_B_SHIFT,
  "TIMER_B", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IERA_SEND_ERR = {
  MFP_IERA, MFP_IERA_SEND_ERR_MASK,
  1, MFP_IERA_SEND_ERR_SHIFT,
  "SEND_ERR", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IERA_SEND_EMPTY = {
  MFP_IERA, MFP_IERA_SEND_EMPTY_MASK,
  1, MFP_IERA_SEND_EMPTY_SHIFT,
  "SEND_EMPTY", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IERA_REC_ERR = {
  MFP_IERA, MFP_IERA_REC_ERR_MASK,
  1, MFP_IERA_REC_ERR_SHIFT,
  "REC_ERR", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IERA_REC_FULL = {
  MFP_IERA, MFP_IERA_REC_FULL_MASK,
  1, MFP_IERA_REC_FULL_SHIFT,
  "REC_FULL", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IERA_TIMER_A = {
  MFP_IERA, MFP_IERA_TIMER_A_MASK,
  1, MFP_IERA_TIMER_A_SHIFT,
  "TIMER_A", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IERA_RS232_RING = {
  MFP_IERA, MFP_IERA_RS232_RING_MASK,
  1, MFP_IERA_RS232_RING_SHIFT,
  "RS232_RING", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IERA_MONO_DETECT = {
  MFP_IERA, MFP_IERA_MONO_DETECT_MASK,
  1, MFP_IERA_MONO_DETECT_SHIFT,
  "MONO_DETECT", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IERB_RS232_DTD = {
  MFP_IERB, MFP_IERB_RS232_DTD_MASK,
  1, MFP_IERB_RS232_DTD_SHIFT,
  "RS232_DTD", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IERB_CENT_BUSY = {
  MFP_IERB, MFP_IERB_CENT_BUSY_MASK,
  1, MFP_IERB_CENT_BUSY_SHIFT,
  "CENT_BUSY", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IERB_RS232_CTS = {
  MFP_IERB, MFP_IERB_RS232_CTS_MASK,
  1, MFP_IERB_RS232_CTS_SHIFT,
  "RS232_CTS", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IERB_BLITTER = {
  MFP_IERB, MFP_IERB_BLITTER_MASK,
  1, MFP_IERB_BLITTER_SHIFT,
  "BLITTER", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IERB_TIMER_D = {
  MFP_IERB, MFP_IERB_TIMER_D_MASK,
  1, MFP_IERB_TIMER_D_SHIFT,
  "TIMER_D", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IERB_TIMER_C = {
  MFP_IERB, MFP_IERB_TIMER_C_MASK,
  1, MFP_IERB_TIMER_C_SHIFT,
  "TIMER_C", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IERB_IKBD_MIDI = {
  MFP_IERB, MFP_IERB_IKBD_MIDI_MASK,
  1, MFP_IERB_IKBD_MIDI_SHIFT,
  "IKBD_MIDI", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IERB_FDC_HDC = {
  MFP_IERB, MFP_IERB_FDC_HDC_MASK,
  1, MFP_IERB_FDC_HDC_SHIFT,
  "FDC_HDC", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IPRA_TIMER_B = {
  MFP_IPRA, MFP_IPRA_TIMER_B_MASK,
  1, MFP_IPRA_TIMER_B_SHIFT,
  "TIMER_B", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IPRA_SEND_ERR = {
  MFP_IPRA, MFP_IPRA_SEND_ERR_MASK,
  1, MFP_IPRA_SEND_ERR_SHIFT,
  "SEND_ERR", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IPRA_SEND_EMPTY = {
  MFP_IPRA, MFP_IPRA_SEND_EMPTY_MASK,
  1, MFP_IPRA_SEND_EMPTY_SHIFT,
  "SEND_EMPTY", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IPRA_REC_ERR = {
  MFP_IPRA, MFP_IPRA_REC_ERR_MASK,
  1, MFP_IPRA_REC_ERR_SHIFT,
  "REC_ERR", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IPRA_REC_FULL = {
  MFP_IPRA, MFP_IPRA_REC_FULL_MASK,
  1, MFP_IPRA_REC_FULL_SHIFT,
  "REC_FULL", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IPRA_TIMER_A = {
  MFP_IPRA, MFP_IPRA_TIMER_A_MASK,
  1, MFP_IPRA_TIMER_A_SHIFT,
  "TIMER_A", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IPRA_RS232_RING = {
  MFP_IPRA, MFP_IPRA_RS232_RING_MASK,
  1, MFP_IPRA_RS232_RING_SHIFT,
  "RS232_RING", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IPRA_MONO_DETECT = {
  MFP_IPRA, MFP_IPRA_MONO_DETECT_MASK,
  1, MFP_IPRA_MONO_DETECT_SHIFT,
  "MONO_DETECT", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IPRB_RS232_DTD = {
  MFP_IPRB, MFP_IPRB_RS232_DTD_MASK,
  1, MFP_IPRB_RS232_DTD_SHIFT,
  "RS232_DTD", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IPRB_CENT_BUSY = {
  MFP_IPRB, MFP_IPRB_CENT_BUSY_MASK,
  1, MFP_IPRB_CENT_BUSY_SHIFT,
  "CENT_BUSY", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IPRB_RS232_CTS = {
  MFP_IPRB, MFP_IPRB_RS232_CTS_MASK,
  1, MFP_IPRB_RS232_CTS_SHIFT,
  "RS232_CTS", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IPRB_BLITTER = {
  MFP_IPRB, MFP_IPRB_BLITTER_MASK,
  1, MFP_IPRB_BLITTER_SHIFT,
  "BLITTER", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IPRB_TIMER_D = {
  MFP_IPRB, MFP_IPRB_TIMER_D_MASK,
  1, MFP_IPRB_TIMER_D_SHIFT,
  "TIMER_D", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IPRB_TIMER_C = {
  MFP_IPRB, MFP_IPRB_TIMER_C_MASK,
  1, MFP_IPRB_TIMER_C_SHIFT,
  "TIMER_C", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IPRB_IKBD_MIDI = {
  MFP_IPRB, MFP_IPRB_IKBD_MIDI_MASK,
  1, MFP_IPRB_IKBD_MIDI_SHIFT,
  "IKBD_MIDI", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IPRB_FDC_HDC = {
  MFP_IPRB, MFP_IPRB_FDC_HDC_MASK,
  1, MFP_IPRB_FDC_HDC_SHIFT,
  "FDC_HDC", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_ISRA_TIMER_B = {
  MFP_ISRA, MFP_ISRA_TIMER_B_MASK,
  1, MFP_ISRA_TIMER_B_SHIFT,
  "TIMER_B", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_ISRA_SEND_ERR = {
  MFP_ISRA, MFP_ISRA_SEND_ERR_MASK,
  1, MFP_ISRA_SEND_ERR_SHIFT,
  "SEND_ERR", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_ISRA_SEND_EMPTY = {
  MFP_ISRA, MFP_ISRA_SEND_EMPTY_MASK,
  1, MFP_ISRA_SEND_EMPTY_SHIFT,
  "SEND_EMPTY", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_ISRA_REC_ERR = {
  MFP_ISRA, MFP_ISRA_REC_ERR_MASK,
  1, MFP_ISRA_REC_ERR_SHIFT,
  "REC_ERR", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_ISRA_REC_FULL = {
  MFP_ISRA, MFP_ISRA_REC_FULL_MASK,
  1, MFP_ISRA_REC_FULL_SHIFT,
  "REC_FULL", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_ISRA_TIMER_A = {
  MFP_ISRA, MFP_ISRA_TIMER_A_MASK,
  1, MFP_ISRA_TIMER_A_SHIFT,
  "TIMER_A", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_ISRA_RS232_RING = {
  MFP_ISRA, MFP_ISRA_RS232_RING_MASK,
  1, MFP_ISRA_RS232_RING_SHIFT,
  "RS232_RING", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_ISRA_MONO_DETECT = {
  MFP_ISRA, MFP_ISRA_MONO_DETECT_MASK,
  1, MFP_ISRA_MONO_DETECT_SHIFT,
  "MONO_DETECT", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_ISRB_RS232_DTD = {
  MFP_ISRB, MFP_ISRB_RS232_DTD_MASK,
  1, MFP_ISRB_RS232_DTD_SHIFT,
  "RS232_DTD", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_ISRB_CENT_BUSY = {
  MFP_ISRB, MFP_ISRB_CENT_BUSY_MASK,
  1, MFP_ISRB_CENT_BUSY_SHIFT,
  "CENT_BUSY", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_ISRB_RS232_CTS = {
  MFP_ISRB, MFP_ISRB_RS232_CTS_MASK,
  1, MFP_ISRB_RS232_CTS_SHIFT,
  "RS232_CTS", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_ISRB_BLITTER = {
  MFP_ISRB, MFP_ISRB_BLITTER_MASK,
  1, MFP_ISRB_BLITTER_SHIFT,
  "BLITTER", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_ISRB_TIMER_D = {
  MFP_ISRB, MFP_ISRB_TIMER_D_MASK,
  1, MFP_ISRB_TIMER_D_SHIFT,
  "TIMER_D", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_ISRB_TIMER_C = {
  MFP_ISRB, MFP_ISRB_TIMER_C_MASK,
  1, MFP_ISRB_TIMER_C_SHIFT,
  "TIMER_C", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_ISRB_IKBD_MIDI = {
  MFP_ISRB, MFP_ISRB_IKBD_MIDI_MASK,
  1, MFP_ISRB_IKBD_MIDI_SHIFT,
  "IKBD_MIDI", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_ISRB_FDC_HDC = {
  MFP_ISRB, MFP_ISRB_FDC_HDC_MASK,
  1, MFP_ISRB_FDC_HDC_SHIFT,
  "FDC_HDC", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IMRA_TIMER_B = {
  MFP_IMRA, MFP_IMRA_TIMER_B_MASK,
  1, MFP_IMRA_TIMER_B_SHIFT,
  "TIMER_B", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IMRA_SEND_ERR = {
  MFP_IMRA, MFP_IMRA_SEND_ERR_MASK,
  1, MFP_IMRA_SEND_ERR_SHIFT,
  "SEND_ERR", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IMRA_SEND_EMPTY = {
  MFP_IMRA, MFP_IMRA_SEND_EMPTY_MASK,
  1, MFP_IMRA_SEND_EMPTY_SHIFT,
  "SEND_EMPTY", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IMRA_REC_ERR = {
  MFP_IMRA, MFP_IMRA_REC_ERR_MASK,
  1, MFP_IMRA_REC_ERR_SHIFT,
  "REC_ERR", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IMRA_REC_FULL = {
  MFP_IMRA, MFP_IMRA_REC_FULL_MASK,
  1, MFP_IMRA_REC_FULL_SHIFT,
  "REC_FULL", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IMRA_TIMER_A = {
  MFP_IMRA, MFP_IMRA_TIMER_A_MASK,
  1, MFP_IMRA_TIMER_A_SHIFT,
  "TIMER_A", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IMRA_RS232_RING = {
  MFP_IMRA, MFP_IMRA_RS232_RING_MASK,
  1, MFP_IMRA_RS232_RING_SHIFT,
  "RS232_RING", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IMRA_MONO_DETECT = {
  MFP_IMRA, MFP_IMRA_MONO_DETECT_MASK,
  1, MFP_IMRA_MONO_DETECT_SHIFT,
  "MONO_DETECT", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IMRB_RS232_DTD = {
  MFP_IMRB, MFP_IMRB_RS232_DTD_MASK,
  1, MFP_IMRB_RS232_DTD_SHIFT,
  "RS232_DTD", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IMRB_CENT_BUSY = {
  MFP_IMRB, MFP_IMRB_CENT_BUSY_MASK,
  1, MFP_IMRB_CENT_BUSY_SHIFT,
  "CENT_BUSY", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IMRB_RS232_CTS = {
  MFP_IMRB, MFP_IMRB_RS232_CTS_MASK,
  1, MFP_IMRB_RS232_CTS_SHIFT,
  "RS232_CTS", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IMRB_BLITTER = {
  MFP_IMRB, MFP_IMRB_BLITTER_MASK,
  1, MFP_IMRB_BLITTER_SHIFT,
  "BLITTER", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IMRB_TIMER_D = {
  MFP_IMRB, MFP_IMRB_TIMER_D_MASK,
  1, MFP_IMRB_TIMER_D_SHIFT,
  "TIMER_D", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IMRB_TIMER_C = {
  MFP_IMRB, MFP_IMRB_TIMER_C_MASK,
  1, MFP_IMRB_TIMER_C_SHIFT,
  "TIMER_C", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IMRB_IKBD_MIDI = {
  MFP_IMRB, MFP_IMRB_IKBD_MIDI_MASK,
  1, MFP_IMRB_IKBD_MIDI_SHIFT,
  "IKBD_MIDI", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_IMRB_FDC_HDC = {
  MFP_IMRB, MFP_IMRB_FDC_HDC_MASK,
  1, MFP_IMRB_FDC_HDC_SHIFT,
  "FDC_HDC", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_VR_ENDINT = {
  MFP_VR, MFP_VR_ENDINT_MASK,
  1, MFP_VR_ENDINT_SHIFT,
  "ENDINT", g_enumStringsENDINT, "Software End Interrupt" };
const stgen::FieldDef g_fieldDef_MFP_VR_VEC_BASE_OFFSET = {
  MFP_VR, MFP_VR_VEC_BASE_OFFSET_MASK,
  1, MFP_VR_VEC_BASE_OFFSET_SHIFT,
  "VEC_BASE_OFFSET", nullptr, "Vector Base OFFset" };
const stgen::FieldDef g_fieldDef_MFP_TACR_MODE_TIMER_A = {
  MFP_TACR, MFP_TACR_MODE_TIMER_A_MASK,
  1, MFP_TACR_MODE_TIMER_A_SHIFT,
  "MODE_TIMER_A", g_enumStringsTIMER_MODE_A, "Timer A Mode" };
const stgen::FieldDef g_fieldDef_MFP_TBCR_MODE_TIMER_B = {
  MFP_TBCR, MFP_TBCR_MODE_TIMER_B_MASK,
  1, MFP_TBCR_MODE_TIMER_B_SHIFT,
  "MODE_TIMER_B", g_enumStringsTIMER_MODE_B, "Timer B Mode" };
const stgen::FieldDef g_fieldDef_MFP_TCDCR_MODE_TIMER_D = {
  MFP_TCDCR, MFP_TCDCR_MODE_TIMER_D_MASK,
  1, MFP_TCDCR_MODE_TIMER_D_SHIFT,
  "MODE_TIMER_D", g_enumStringsTIMER_MODE_CD, "Timer D Mode" };
const stgen::FieldDef g_fieldDef_MFP_TCDCR_MODE_TIMER_C = {
  MFP_TCDCR, MFP_TCDCR_MODE_TIMER_C_MASK,
  1, MFP_TCDCR_MODE_TIMER_C_SHIFT,
  "MODE_TIMER_C", g_enumStringsTIMER_MODE_CD, "Timer C Mode" };
const stgen::FieldDef g_fieldDef_MFP_TADR_ALL = {
  MFP_TADR, MFP_TADR_ALL_MASK,
  1, MFP_TADR_ALL_SHIFT,
  "ALL", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_TBDR_ALL = {
  MFP_TBDR, MFP_TBDR_ALL_MASK,
  1, MFP_TBDR_ALL_SHIFT,
  "ALL", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_TCDR_ALL = {
  MFP_TCDR, MFP_TCDR_ALL_MASK,
  1, MFP_TCDR_ALL_SHIFT,
  "ALL", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_TDDR_ALL = {
  MFP_TDDR, MFP_TDDR_ALL_MASK,
  1, MFP_TDDR_ALL_SHIFT,
  "ALL", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_SCR_ALL = {
  MFP_SCR, MFP_SCR_ALL_MASK,
  1, MFP_SCR_ALL_SHIFT,
  "ALL", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_UCR_PARITY_EVEN = {
  MFP_UCR, MFP_UCR_PARITY_EVEN_MASK,
  1, MFP_UCR_PARITY_EVEN_SHIFT,
  "PARITY_EVEN", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_UCR_PARITY_IGNORE = {
  MFP_UCR, MFP_UCR_PARITY_IGNORE_MASK,
  1, MFP_UCR_PARITY_IGNORE_SHIFT,
  "PARITY_IGNORE", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_UCR_FORMAT = {
  MFP_UCR, MFP_UCR_FORMAT_MASK,
  1, MFP_UCR_FORMAT_SHIFT,
  "FORMAT", nullptr, "Start/Stop/Synchronous" };
const stgen::FieldDef g_fieldDef_MFP_UCR_WORD_LEN = {
  MFP_UCR, MFP_UCR_WORD_LEN_MASK,
  1, MFP_UCR_WORD_LEN_SHIFT,
  "WORD_LEN", g_enumStringsUSARTLEN, "Word Length" };
const stgen::FieldDef g_fieldDef_MFP_UCR_CLOCK_DIV = {
  MFP_UCR, MFP_UCR_CLOCK_DIV_MASK,
  1, MFP_UCR_CLOCK_DIV_SHIFT,
  "CLOCK_DIV", nullptr, "Divide by 16" };
const stgen::FieldDef g_fieldDef_MFP_RSR_REC_ENABLE = {
  MFP_RSR, MFP_RSR_REC_ENABLE_MASK,
  1, MFP_RSR_REC_ENABLE_SHIFT,
  "REC_ENABLE", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_RSR_STRIP = {
  MFP_RSR, MFP_RSR_STRIP_MASK,
  1, MFP_RSR_STRIP_SHIFT,
  "STRIP", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_RSR_MATCH = {
  MFP_RSR, MFP_RSR_MATCH_MASK,
  1, MFP_RSR_MATCH_SHIFT,
  "MATCH", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_RSR_FOUND = {
  MFP_RSR, MFP_RSR_FOUND_MASK,
  1, MFP_RSR_FOUND_SHIFT,
  "FOUND", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_RSR_FRAME_ERR = {
  MFP_RSR, MFP_RSR_FRAME_ERR_MASK,
  1, MFP_RSR_FRAME_ERR_SHIFT,
  "FRAME_ERR", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_RSR_PARITY_ERR = {
  MFP_RSR, MFP_RSR_PARITY_ERR_MASK,
  1, MFP_RSR_PARITY_ERR_SHIFT,
  "PARITY_ERR", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_RSR_OVERRUN_ERR = {
  MFP_RSR, MFP_RSR_OVERRUN_ERR_MASK,
  1, MFP_RSR_OVERRUN_ERR_SHIFT,
  "OVERRUN_ERR", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_RSR_BUFFER_FULL = {
  MFP_RSR, MFP_RSR_BUFFER_FULL_MASK,
  1, MFP_RSR_BUFFER_FULL_SHIFT,
  "BUFFER_FULL", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_TSR_TRANS_ENABLE = {
  MFP_TSR, MFP_TSR_TRANS_ENABLE_MASK,
  1, MFP_TSR_TRANS_ENABLE_SHIFT,
  "TRANS_ENABLE", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_TSR_LOW = {
  MFP_TSR, MFP_TSR_LOW_MASK,
  1, MFP_TSR_LOW_SHIFT,
  "LOW", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_TSR_HIGH = {
  MFP_TSR, MFP_TSR_HIGH_MASK,
  1, MFP_TSR_HIGH_SHIFT,
  "HIGH", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_TSR_BREAK = {
  MFP_TSR, MFP_TSR_BREAK_MASK,
  1, MFP_TSR_BREAK_SHIFT,
  "BREAK", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_TSR_EOT = {
  MFP_TSR, MFP_TSR_EOT_MASK,
  1, MFP_TSR_EOT_SHIFT,
  "EOT", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_TSR_AUTO_TURN = {
  MFP_TSR, MFP_TSR_AUTO_TURN_MASK,
  1, MFP_TSR_AUTO_TURN_SHIFT,
  "AUTO_TURN", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_TSR_UNDERRUN_ERR = {
  MFP_TSR, MFP_TSR_UNDERRUN_ERR_MASK,
  1, MFP_TSR_UNDERRUN_ERR_SHIFT,
  "UNDERRUN_ERR", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_TSR_BUFFER_EMPTY = {
  MFP_TSR, MFP_TSR_BUFFER_EMPTY_MASK,
  1, MFP_TSR_BUFFER_EMPTY_SHIFT,
  "BUFFER_EMPTY", nullptr, "" };
const stgen::FieldDef g_fieldDef_MFP_UDR_ALL = {
  MFP_UDR, MFP_UDR_ALL_MASK,
  1, MFP_UDR_ALL_SHIFT,
  "ALL", nullptr, "" };
const stgen::FieldDef g_fieldDef_YM_MIXER_TONE_A_OFF = {
  YM_MIXER, YM_MIXER_TONE_A_OFF_MASK,
  1, YM_MIXER_TONE_A_OFF_SHIFT,
  "TONE_A_OFF", nullptr, "" };
const stgen::FieldDef g_fieldDef_YM_MIXER_TONE_B_OFF = {
  YM_MIXER, YM_MIXER_TONE_B_OFF_MASK,
  1, YM_MIXER_TONE_B_OFF_SHIFT,
  "TONE_B_OFF", nullptr, "" };
const stgen::FieldDef g_fieldDef_YM_MIXER_TONE_C_OFF = {
  YM_MIXER, YM_MIXER_TONE_C_OFF_MASK,
  1, YM_MIXER_TONE_C_OFF_SHIFT,
  "TONE_C_OFF", nullptr, "" };
const stgen::FieldDef g_fieldDef_YM_MIXER_NOISE_A_OFF = {
  YM_MIXER, YM_MIXER_NOISE_A_OFF_MASK,
  1, YM_MIXER_NOISE_A_OFF_SHIFT,
  "NOISE_A_OFF", nullptr, "" };
const stgen::FieldDef g_fieldDef_YM_MIXER_NOISE_B_OFF = {
  YM_MIXER, YM_MIXER_NOISE_B_OFF_MASK,
  1, YM_MIXER_NOISE_B_OFF_SHIFT,
  "NOISE_B_OFF", nullptr, "" };
const stgen::FieldDef g_fieldDef_YM_MIXER_NOISE_C_OFF = {
  YM_MIXER, YM_MIXER_NOISE_C_OFF_MASK,
  1, YM_MIXER_NOISE_C_OFF_SHIFT,
  "NOISE_C_OFF", nullptr, "" };
const stgen::FieldDef g_fieldDef_YM_MIXER_PORT_A_OUT = {
  YM_MIXER, YM_MIXER_PORT_A_OUT_MASK,
  1, YM_MIXER_PORT_A_OUT_SHIFT,
  "PORT_A_OUT", nullptr, "" };
const stgen::FieldDef g_fieldDef_YM_MIXER_PORT_B_OUT = {
  YM_MIXER, YM_MIXER_PORT_B_OUT_MASK,
  1, YM_MIXER_PORT_B_OUT_SHIFT,
  "PORT_B_OUT", nullptr, "" };
const stgen::FieldDef g_fieldDef_YM_VOLUME_A_VOL = {
  YM_VOLUME_A, YM_VOLUME_A_VOL_MASK,
  1, YM_VOLUME_A_VOL_SHIFT,
  "VOL", nullptr, "" };
const stgen::FieldDef g_fieldDef_YM_VOLUME_A_ENVELOPE = {
  YM_VOLUME_A, YM_VOLUME_A_ENVELOPE_MASK,
  1, YM_VOLUME_A_ENVELOPE_SHIFT,
  "ENVELOPE", nullptr, "" };
const stgen::FieldDef g_fieldDef_YM_VOLUME_B_VOL = {
  YM_VOLUME_B, YM_VOLUME_B_VOL_MASK,
  1, YM_VOLUME_B_VOL_SHIFT,
  "VOL", nullptr, "" };
const stgen::FieldDef g_fieldDef_YM_VOLUME_B_ENVELOPE = {
  YM_VOLUME_B, YM_VOLUME_B_ENVELOPE_MASK,
  1, YM_VOLUME_B_ENVELOPE_SHIFT,
  "ENVELOPE", nullptr, "" };
const stgen::FieldDef g_fieldDef_YM_VOLUME_C_VOL = {
  YM_VOLUME_C, YM_VOLUME_C_VOL_MASK,
  1, YM_VOLUME_C_VOL_SHIFT,
  "VOL", nullptr, "" };
const stgen::FieldDef g_fieldDef_YM_VOLUME_C_ENVELOPE = {
  YM_VOLUME_C, YM_VOLUME_C_ENVELOPE_MASK,
  1, YM_VOLUME_C_ENVELOPE_SHIFT,
  "ENVELOPE", nullptr, "" };
const stgen::FieldDef g_fieldDef_YM_PERIOD_ENV_SHAPE_SHAPE = {
  YM_PERIOD_ENV_SHAPE, YM_PERIOD_ENV_SHAPE_SHAPE_MASK,
  1, YM_PERIOD_ENV_SHAPE_SHAPE_SHIFT,
  "SHAPE", g_enumStringsENV_SHAPE, "" };
const stgen::FieldDef g_fieldDef_BLT_SRC_INC_X_ALL = {
  BLT_SRC_INC_X, BLT_SRC_INC_X_ALL_MASK,
  2, BLT_SRC_INC_X_ALL_SHIFT,
  "ALL", nullptr, "" };
const stgen::FieldDef g_fieldDef_BLT_SRC_INC_Y_ALL = {
  BLT_SRC_INC_Y, BLT_SRC_INC_Y_ALL_MASK,
  2, BLT_SRC_INC_Y_ALL_SHIFT,
  "ALL", nullptr, "" };
const stgen::FieldDef g_fieldDef_BLT_SRC_ADDR_ALL = {
  BLT_SRC_ADDR, BLT_SRC_ADDR_ALL_MASK,
  4, BLT_SRC_ADDR_ALL_SHIFT,
  "ALL", nullptr, "" };
const stgen::FieldDef g_fieldDef_BLT_ENDMASK_1_ALL = {
  BLT_ENDMASK_1, BLT_ENDMASK_1_ALL_MASK,
  2, BLT_ENDMASK_1_ALL_SHIFT,
  "ALL", nullptr, "" };
const stgen::FieldDef g_fieldDef_BLT_ENDMASK_2_ALL = {
  BLT_ENDMASK_2, BLT_ENDMASK_2_ALL_MASK,
  2, BLT_ENDMASK_2_ALL_SHIFT,
  "ALL", nullptr, "" };
const stgen::FieldDef g_fieldDef_BLT_ENDMASK_3_ALL = {
  BLT_ENDMASK_3, BLT_ENDMASK_3_ALL_MASK,
  2, BLT_ENDMASK_3_ALL_SHIFT,
  "ALL", nullptr, "" };
const stgen::FieldDef g_fieldDef_BLT_DST_INC_X_ALL = {
  BLT_DST_INC_X, BLT_DST_INC_X_ALL_MASK,
  2, BLT_DST_INC_X_ALL_SHIFT,
  "ALL", nullptr, "" };
const stgen::FieldDef g_fieldDef_BLT_DST_INC_Y_ALL = {
  BLT_DST_INC_Y, BLT_DST_INC_Y_ALL_MASK,
  2, BLT_DST_INC_Y_ALL_SHIFT,
  "ALL", nullptr, "" };
const stgen::FieldDef g_fieldDef_BLT_DST_ADDR_ALL = {
  BLT_DST_ADDR, BLT_DST_ADDR_ALL_MASK,
  4, BLT_DST_ADDR_ALL_SHIFT,
  "ALL", nullptr, "" };
const stgen::FieldDef g_fieldDef_BLT_XCOUNT_ALL = {
  BLT_XCOUNT, BLT_XCOUNT_ALL_MASK,
  2, BLT_XCOUNT_ALL_SHIFT,
  "ALL", nullptr, "" };
const stgen::FieldDef g_fieldDef_BLT_YCOUNT_ALL = {
  BLT_YCOUNT, BLT_YCOUNT_ALL_MASK,
  2, BLT_YCOUNT_ALL_SHIFT,
  "ALL", nullptr, "" };
const stgen::FieldDef g_fieldDef_BLT_HALFTONE_OP_OP = {
  BLT_HALFTONE_OP, BLT_HALFTONE_OP_OP_MASK,
  1, BLT_HALFTONE_OP_OP_SHIFT,
  "OP", g_enumStringsBLT_HOP, "" };
const stgen::FieldDef g_fieldDef_BLT_LOGICAL_OP_OP = {
  BLT_LOGICAL_OP, BLT_LOGICAL_OP_OP_MASK,
  1, BLT_LOGICAL_OP_OP_SHIFT,
  "OP", g_enumStringsBLT_OP, "" };
const stgen::FieldDef g_fieldDef_BLT_CTRL_1_HALFTONE_LINE = {
  BLT_CTRL_1, BLT_CTRL_1_HALFTONE_LINE_MASK,
  1, BLT_CTRL_1_HALFTONE_LINE_SHIFT,
  "HALFTONE_LINE", nullptr, "Halftone Line" };
const stgen::FieldDef g_fieldDef_BLT_CTRL_1_SMUDGE = {
  BLT_CTRL_1, BLT_CTRL_1_SMUDGE_MASK,
  1, BLT_CTRL_1_SMUDGE_SHIFT,
  "SMUDGE", nullptr, "SMUDGE mode" };
const stgen::FieldDef g_fieldDef_BLT_CTRL_1_HOG = {
  BLT_CTRL_1, BLT_CTRL_1_HOG_MASK,
  1, BLT_CTRL_1_HOG_SHIFT,
  "HOG", nullptr, "HOG mode" };
const stgen::FieldDef g_fieldDef_BLT_CTRL_1_BUSY = {
  BLT_CTRL_1, BLT_CTRL_1_BUSY_MASK,
  1, BLT_CTRL_1_BUSY_SHIFT,
  "BUSY", nullptr, "Blitter Busy" };
const stgen::FieldDef g_fieldDef_BLT_CTRL_2_SKEW = {
  BLT_CTRL_2, BLT_CTRL_2_SKEW_MASK,
  1, BLT_CTRL_2_SKEW_SHIFT,
  "SKEW", nullptr, "Source Skew" };
const stgen::FieldDef g_fieldDef_BLT_CTRL_2_NFSR = {
  BLT_CTRL_2, BLT_CTRL_2_NFSR_MASK,
  1, BLT_CTRL_2_NFSR_SHIFT,
  "NFSR", nullptr, "No Final Source Read" };
const stgen::FieldDef g_fieldDef_BLT_CTRL_2_FXSR = {
  BLT_CTRL_2, BLT_CTRL_2_FXSR_MASK,
  1, BLT_CTRL_2_FXSR_SHIFT,
  "FXSR", nullptr, "Force Extra Source Read" };
const stgen::FieldDef g_fieldDef_DMA_BUFFER_INTERRUPTS_i7_REPLAY = {
  DMA_BUFFER_INTERRUPTS, DMA_BUFFER_INTERRUPTS_i7_REPLAY_MASK,
  1, DMA_BUFFER_INTERRUPTS_i7_REPLAY_SHIFT,
  "i7_REPLAY", nullptr, "MFP-15-Int (I7) at end of replay buffer" };
const stgen::FieldDef g_fieldDef_DMA_BUFFER_INTERRUPTS_I7_RECORD = {
  DMA_BUFFER_INTERRUPTS, DMA_BUFFER_INTERRUPTS_I7_RECORD_MASK,
  1, DMA_BUFFER_INTERRUPTS_I7_RECORD_SHIFT,
  "I7_RECORD", nullptr, "MFP-15-Int (I7) at end of record buffer" };
const stgen::FieldDef g_fieldDef_DMA_BUFFER_INTERRUPTS_TIMERA_REPLAY = {
  DMA_BUFFER_INTERRUPTS, DMA_BUFFER_INTERRUPTS_TIMERA_REPLAY_MASK,
  1, DMA_BUFFER_INTERRUPTS_TIMERA_REPLAY_SHIFT,
  "TIMERA_REPLAY", nullptr, "TimerA-Int at end of replay buffer" };
const stgen::FieldDef g_fieldDef_DMA_BUFFER_INTERRUPTS_TIMERA_RECORD = {
  DMA_BUFFER_INTERRUPTS, DMA_BUFFER_INTERRUPTS_TIMERA_RECORD_MASK,
  1, DMA_BUFFER_INTERRUPTS_TIMERA_RECORD_SHIFT,
  "TIMERA_RECORD", nullptr, "TimerA-Int at end of record buffer" };
const stgen::FieldDef g_fieldDef_DMA_CONTROL_REPLAY = {
  DMA_CONTROL, DMA_CONTROL_REPLAY_MASK,
  1, DMA_CONTROL_REPLAY_SHIFT,
  "REPLAY", nullptr, "Replay enabled" };
const stgen::FieldDef g_fieldDef_DMA_CONTROL_LOOP_REPLAY = {
  DMA_CONTROL, DMA_CONTROL_LOOP_REPLAY_MASK,
  1, DMA_CONTROL_LOOP_REPLAY_SHIFT,
  "LOOP_REPLAY", nullptr, "" };
const stgen::FieldDef g_fieldDef_DMA_CONTROL_RECORD = {
  DMA_CONTROL, DMA_CONTROL_RECORD_MASK,
  1, DMA_CONTROL_RECORD_SHIFT,
  "RECORD", nullptr, "Recording enabled" };
const stgen::FieldDef g_fieldDef_DMA_CONTROL_LOOP_RECORD = {
  DMA_CONTROL, DMA_CONTROL_LOOP_RECORD_MASK,
  1, DMA_CONTROL_LOOP_RECORD_SHIFT,
  "LOOP_RECORD", nullptr, "" };
const stgen::FieldDef g_fieldDef_DMA_CONTROL_SELECT = {
  DMA_CONTROL, DMA_CONTROL_SELECT_MASK,
  1, DMA_CONTROL_SELECT_SHIFT,
  "SELECT", nullptr, "0=record select, 1=replay select" };
const stgen::FieldDef g_fieldDef_DMA_SND_MODE_DMA_FREQ = {
  DMA_SND_MODE, DMA_SND_MODE_DMA_FREQ_MASK,
  1, DMA_SND_MODE_DMA_FREQ_SHIFT,
  "DMA_FREQ", g_enumStringsDMA_FREQ, "" };
const stgen::FieldDef g_fieldDef_DMA_SND_MODE_FORMAT = {
  DMA_SND_MODE, DMA_SND_MODE_FORMAT_MASK,
  1, DMA_SND_MODE_FORMAT_SHIFT,
  "FORMAT", g_enumStringsIS_STEREO, "" };
/* Register Field Sets */

const stgen::FieldDef* g_regFieldsDef_MMU_CONFIG[] = {
	 &g_fieldDef_MMU_CONFIG_BANK1,
	 &g_fieldDef_MMU_CONFIG_BANK0,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_VID_BASE_HIGH[] = {
	 &g_fieldDef_VID_BASE_HIGH_ALL,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_VID_BASE_MID[] = {
	 &g_fieldDef_VID_BASE_MID_ALL,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_VID_BASE_LOW_STE[] = {
	 &g_fieldDef_VID_BASE_LOW_STE_ALL,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_VID_SCANLINE_OFFSET_STE[] = {
	 &g_fieldDef_VID_SCANLINE_OFFSET_STE_ALL,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_VID_HORIZ_SCROLL_STE[] = {
	 &g_fieldDef_VID_HORIZ_SCROLL_STE_PIXELS,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_VID_SYNC_MODE[] = {
	 &g_fieldDef_VID_SYNC_MODE_TYPE,
	 &g_fieldDef_VID_SYNC_MODE_RATE,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_VID_PAL_0[] = {
	 &g_fieldDef_VID_PAL_0_BLUE_ST,
	 &g_fieldDef_VID_PAL_0_BLUE_STE,
	 &g_fieldDef_VID_PAL_0_GREEN_ST,
	 &g_fieldDef_VID_PAL_0_GREEN_STE,
	 &g_fieldDef_VID_PAL_0_RED_ST,
	 &g_fieldDef_VID_PAL_0_RED_STE,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_VID_SHIFTER_RES[] = {
	 &g_fieldDef_VID_SHIFTER_RES_RES,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_FDC_ACCESS[] = {
	 &g_fieldDef_FDC_ACCESS_ALL,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_FDC_STATUS[] = {
	 &g_fieldDef_FDC_STATUS_ERROR,
	 &g_fieldDef_FDC_STATUS_SECT_CNT,
	 &g_fieldDef_FDC_STATUS_DATA_REQ,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_FDC_DMA_BASE_HIGH[] = {
	 &g_fieldDef_FDC_DMA_BASE_HIGH_ALL,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_FDC_DMA_BASE_MID[] = {
	 &g_fieldDef_FDC_DMA_BASE_MID_ALL,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_FDC_DMA_BASE_LOW[] = {
	 &g_fieldDef_FDC_DMA_BASE_LOW_ALL,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_MFP_GPIP[] = {
	 &g_fieldDef_MFP_GPIP_ALL,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_MFP_AER[] = {
	 &g_fieldDef_MFP_AER_CENT_BUSY,
	 &g_fieldDef_MFP_AER_RS232_DCD,
	 &g_fieldDef_MFP_AER_RS232_CTS,
	 &g_fieldDef_MFP_AER_KBD_MIDI,
	 &g_fieldDef_MFP_AER_FDC_HDC,
	 &g_fieldDef_MFP_AER_RS232_RING,
	 &g_fieldDef_MFP_AER_MONO,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_MFP_DDR[] = {
	 &g_fieldDef_MFP_DDR_CENT_BUSY,
	 &g_fieldDef_MFP_DDR_RS232_DCD,
	 &g_fieldDef_MFP_DDR_RS232_CTS,
	 &g_fieldDef_MFP_DDR_KBD_MIDI,
	 &g_fieldDef_MFP_DDR_FDC_HDC,
	 &g_fieldDef_MFP_DDR_RS232_RING,
	 &g_fieldDef_MFP_DDR_MONO,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_MFP_IERA[] = {
	 &g_fieldDef_MFP_IERA_TIMER_B,
	 &g_fieldDef_MFP_IERA_SEND_ERR,
	 &g_fieldDef_MFP_IERA_SEND_EMPTY,
	 &g_fieldDef_MFP_IERA_REC_ERR,
	 &g_fieldDef_MFP_IERA_REC_FULL,
	 &g_fieldDef_MFP_IERA_TIMER_A,
	 &g_fieldDef_MFP_IERA_RS232_RING,
	 &g_fieldDef_MFP_IERA_MONO_DETECT,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_MFP_IERB[] = {
	 &g_fieldDef_MFP_IERB_RS232_DTD,
	 &g_fieldDef_MFP_IERB_CENT_BUSY,
	 &g_fieldDef_MFP_IERB_RS232_CTS,
	 &g_fieldDef_MFP_IERB_BLITTER,
	 &g_fieldDef_MFP_IERB_TIMER_D,
	 &g_fieldDef_MFP_IERB_TIMER_C,
	 &g_fieldDef_MFP_IERB_IKBD_MIDI,
	 &g_fieldDef_MFP_IERB_FDC_HDC,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_MFP_IPRA[] = {
	 &g_fieldDef_MFP_IPRA_TIMER_B,
	 &g_fieldDef_MFP_IPRA_SEND_ERR,
	 &g_fieldDef_MFP_IPRA_SEND_EMPTY,
	 &g_fieldDef_MFP_IPRA_REC_ERR,
	 &g_fieldDef_MFP_IPRA_REC_FULL,
	 &g_fieldDef_MFP_IPRA_TIMER_A,
	 &g_fieldDef_MFP_IPRA_RS232_RING,
	 &g_fieldDef_MFP_IPRA_MONO_DETECT,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_MFP_IPRB[] = {
	 &g_fieldDef_MFP_IPRB_RS232_DTD,
	 &g_fieldDef_MFP_IPRB_CENT_BUSY,
	 &g_fieldDef_MFP_IPRB_RS232_CTS,
	 &g_fieldDef_MFP_IPRB_BLITTER,
	 &g_fieldDef_MFP_IPRB_TIMER_D,
	 &g_fieldDef_MFP_IPRB_TIMER_C,
	 &g_fieldDef_MFP_IPRB_IKBD_MIDI,
	 &g_fieldDef_MFP_IPRB_FDC_HDC,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_MFP_ISRA[] = {
	 &g_fieldDef_MFP_ISRA_TIMER_B,
	 &g_fieldDef_MFP_ISRA_SEND_ERR,
	 &g_fieldDef_MFP_ISRA_SEND_EMPTY,
	 &g_fieldDef_MFP_ISRA_REC_ERR,
	 &g_fieldDef_MFP_ISRA_REC_FULL,
	 &g_fieldDef_MFP_ISRA_TIMER_A,
	 &g_fieldDef_MFP_ISRA_RS232_RING,
	 &g_fieldDef_MFP_ISRA_MONO_DETECT,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_MFP_ISRB[] = {
	 &g_fieldDef_MFP_ISRB_RS232_DTD,
	 &g_fieldDef_MFP_ISRB_CENT_BUSY,
	 &g_fieldDef_MFP_ISRB_RS232_CTS,
	 &g_fieldDef_MFP_ISRB_BLITTER,
	 &g_fieldDef_MFP_ISRB_TIMER_D,
	 &g_fieldDef_MFP_ISRB_TIMER_C,
	 &g_fieldDef_MFP_ISRB_IKBD_MIDI,
	 &g_fieldDef_MFP_ISRB_FDC_HDC,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_MFP_IMRA[] = {
	 &g_fieldDef_MFP_IMRA_TIMER_B,
	 &g_fieldDef_MFP_IMRA_SEND_ERR,
	 &g_fieldDef_MFP_IMRA_SEND_EMPTY,
	 &g_fieldDef_MFP_IMRA_REC_ERR,
	 &g_fieldDef_MFP_IMRA_REC_FULL,
	 &g_fieldDef_MFP_IMRA_TIMER_A,
	 &g_fieldDef_MFP_IMRA_RS232_RING,
	 &g_fieldDef_MFP_IMRA_MONO_DETECT,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_MFP_IMRB[] = {
	 &g_fieldDef_MFP_IMRB_RS232_DTD,
	 &g_fieldDef_MFP_IMRB_CENT_BUSY,
	 &g_fieldDef_MFP_IMRB_RS232_CTS,
	 &g_fieldDef_MFP_IMRB_BLITTER,
	 &g_fieldDef_MFP_IMRB_TIMER_D,
	 &g_fieldDef_MFP_IMRB_TIMER_C,
	 &g_fieldDef_MFP_IMRB_IKBD_MIDI,
	 &g_fieldDef_MFP_IMRB_FDC_HDC,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_MFP_VR[] = {
	 &g_fieldDef_MFP_VR_ENDINT,
	 &g_fieldDef_MFP_VR_VEC_BASE_OFFSET,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_MFP_TACR[] = {
	 &g_fieldDef_MFP_TACR_MODE_TIMER_A,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_MFP_TBCR[] = {
	 &g_fieldDef_MFP_TBCR_MODE_TIMER_B,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_MFP_TCDCR[] = {
	 &g_fieldDef_MFP_TCDCR_MODE_TIMER_D,
	 &g_fieldDef_MFP_TCDCR_MODE_TIMER_C,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_MFP_TADR[] = {
	 &g_fieldDef_MFP_TADR_ALL,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_MFP_TBDR[] = {
	 &g_fieldDef_MFP_TBDR_ALL,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_MFP_TCDR[] = {
	 &g_fieldDef_MFP_TCDR_ALL,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_MFP_TDDR[] = {
	 &g_fieldDef_MFP_TDDR_ALL,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_MFP_SCR[] = {
	 &g_fieldDef_MFP_SCR_ALL,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_MFP_UCR[] = {
	 &g_fieldDef_MFP_UCR_PARITY_EVEN,
	 &g_fieldDef_MFP_UCR_PARITY_IGNORE,
	 &g_fieldDef_MFP_UCR_FORMAT,
	 &g_fieldDef_MFP_UCR_WORD_LEN,
	 &g_fieldDef_MFP_UCR_CLOCK_DIV,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_MFP_RSR[] = {
	 &g_fieldDef_MFP_RSR_REC_ENABLE,
	 &g_fieldDef_MFP_RSR_STRIP,
	 &g_fieldDef_MFP_RSR_MATCH,
	 &g_fieldDef_MFP_RSR_FOUND,
	 &g_fieldDef_MFP_RSR_FRAME_ERR,
	 &g_fieldDef_MFP_RSR_PARITY_ERR,
	 &g_fieldDef_MFP_RSR_OVERRUN_ERR,
	 &g_fieldDef_MFP_RSR_BUFFER_FULL,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_MFP_TSR[] = {
	 &g_fieldDef_MFP_TSR_TRANS_ENABLE,
	 &g_fieldDef_MFP_TSR_LOW,
	 &g_fieldDef_MFP_TSR_HIGH,
	 &g_fieldDef_MFP_TSR_BREAK,
	 &g_fieldDef_MFP_TSR_EOT,
	 &g_fieldDef_MFP_TSR_AUTO_TURN,
	 &g_fieldDef_MFP_TSR_UNDERRUN_ERR,
	 &g_fieldDef_MFP_TSR_BUFFER_EMPTY,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_MFP_UDR[] = {
	 &g_fieldDef_MFP_UDR_ALL,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_YM_MIXER[] = {
	 &g_fieldDef_YM_MIXER_TONE_A_OFF,
	 &g_fieldDef_YM_MIXER_TONE_B_OFF,
	 &g_fieldDef_YM_MIXER_TONE_C_OFF,
	 &g_fieldDef_YM_MIXER_NOISE_A_OFF,
	 &g_fieldDef_YM_MIXER_NOISE_B_OFF,
	 &g_fieldDef_YM_MIXER_NOISE_C_OFF,
	 &g_fieldDef_YM_MIXER_PORT_A_OUT,
	 &g_fieldDef_YM_MIXER_PORT_B_OUT,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_YM_VOLUME_A[] = {
	 &g_fieldDef_YM_VOLUME_A_VOL,
	 &g_fieldDef_YM_VOLUME_A_ENVELOPE,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_YM_VOLUME_B[] = {
	 &g_fieldDef_YM_VOLUME_B_VOL,
	 &g_fieldDef_YM_VOLUME_B_ENVELOPE,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_YM_VOLUME_C[] = {
	 &g_fieldDef_YM_VOLUME_C_VOL,
	 &g_fieldDef_YM_VOLUME_C_ENVELOPE,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_YM_PERIOD_ENV_SHAPE[] = {
	 &g_fieldDef_YM_PERIOD_ENV_SHAPE_SHAPE,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_BLT_SRC_INC_X[] = {
	 &g_fieldDef_BLT_SRC_INC_X_ALL,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_BLT_SRC_INC_Y[] = {
	 &g_fieldDef_BLT_SRC_INC_Y_ALL,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_BLT_SRC_ADDR[] = {
	 &g_fieldDef_BLT_SRC_ADDR_ALL,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_BLT_ENDMASK_1[] = {
	 &g_fieldDef_BLT_ENDMASK_1_ALL,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_BLT_ENDMASK_2[] = {
	 &g_fieldDef_BLT_ENDMASK_2_ALL,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_BLT_ENDMASK_3[] = {
	 &g_fieldDef_BLT_ENDMASK_3_ALL,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_BLT_DST_INC_X[] = {
	 &g_fieldDef_BLT_DST_INC_X_ALL,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_BLT_DST_INC_Y[] = {
	 &g_fieldDef_BLT_DST_INC_Y_ALL,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_BLT_DST_ADDR[] = {
	 &g_fieldDef_BLT_DST_ADDR_ALL,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_BLT_XCOUNT[] = {
	 &g_fieldDef_BLT_XCOUNT_ALL,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_BLT_YCOUNT[] = {
	 &g_fieldDef_BLT_YCOUNT_ALL,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_BLT_HALFTONE_OP[] = {
	 &g_fieldDef_BLT_HALFTONE_OP_OP,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_BLT_LOGICAL_OP[] = {
	 &g_fieldDef_BLT_LOGICAL_OP_OP,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_BLT_CTRL_1[] = {
	 &g_fieldDef_BLT_CTRL_1_HALFTONE_LINE,
	 &g_fieldDef_BLT_CTRL_1_SMUDGE,
	 &g_fieldDef_BLT_CTRL_1_HOG,
	 &g_fieldDef_BLT_CTRL_1_BUSY,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_BLT_CTRL_2[] = {
	 &g_fieldDef_BLT_CTRL_2_SKEW,
	 &g_fieldDef_BLT_CTRL_2_NFSR,
	 &g_fieldDef_BLT_CTRL_2_FXSR,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_DMA_BUFFER_INTERRUPTS[] = {
	 &g_fieldDef_DMA_BUFFER_INTERRUPTS_i7_REPLAY,
	 &g_fieldDef_DMA_BUFFER_INTERRUPTS_I7_RECORD,
	 &g_fieldDef_DMA_BUFFER_INTERRUPTS_TIMERA_REPLAY,
	 &g_fieldDef_DMA_BUFFER_INTERRUPTS_TIMERA_RECORD,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_DMA_CONTROL[] = {
	 &g_fieldDef_DMA_CONTROL_REPLAY,
	 &g_fieldDef_DMA_CONTROL_LOOP_REPLAY,
	 &g_fieldDef_DMA_CONTROL_RECORD,
	 &g_fieldDef_DMA_CONTROL_LOOP_RECORD,
	 &g_fieldDef_DMA_CONTROL_SELECT,
	nullptr
};
const stgen::FieldDef* g_regFieldsDef_DMA_SND_MODE[] = {
	 &g_fieldDef_DMA_SND_MODE_DMA_FREQ,
	 &g_fieldDef_DMA_SND_MODE_FORMAT,
	nullptr
};
} // namespace
